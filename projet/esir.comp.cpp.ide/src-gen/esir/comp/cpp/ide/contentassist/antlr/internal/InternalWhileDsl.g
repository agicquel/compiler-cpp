/*
 * generated by Xtext 2.19.0
 */
grammar InternalWhileDsl;

options {
	superClass=AbstractInternalContentAssistParser;
	backtrack=true;
}

@lexer::header {
package esir.comp.cpp.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package esir.comp.cpp.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import esir.comp.cpp.services.WhileDslGrammarAccess;

}
@parser::members {
	private WhileDslGrammarAccess grammarAccess;

	public void setGrammarAccess(WhileDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getProgramAssignment()); }
		(rule__Model__ProgramAssignment)*
		{ after(grammarAccess.getModelAccess().getProgramAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFunction
entryRuleFunction
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getFunctionAccess().getGroup()); }
		(rule__Function__Group__0)
		{ after(grammarAccess.getFunctionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDefinition
entryRuleDefinition
:
{ before(grammarAccess.getDefinitionRule()); }
	 ruleDefinition
{ after(grammarAccess.getDefinitionRule()); } 
	 EOF 
;

// Rule Definition
ruleDefinition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDefinitionAccess().getGroup()); }
		(rule__Definition__Group__0)
		{ after(grammarAccess.getDefinitionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleInput
entryRuleInput
:
{ before(grammarAccess.getInputRule()); }
	 ruleInput
{ after(grammarAccess.getInputRule()); } 
	 EOF 
;

// Rule Input
ruleInput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getInputAccess().getGroup()); }
		(rule__Input__Group__0)
		{ after(grammarAccess.getInputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOutput
entryRuleOutput
:
{ before(grammarAccess.getOutputRule()); }
	 ruleOutput
{ after(grammarAccess.getOutputRule()); } 
	 EOF 
;

// Rule Output
ruleOutput 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOutputAccess().getGroup()); }
		(rule__Output__Group__0)
		{ after(grammarAccess.getOutputAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommands
entryRuleCommands
:
{ before(grammarAccess.getCommandsRule()); }
	 ruleCommands
{ after(grammarAccess.getCommandsRule()); } 
	 EOF 
;

// Rule Commands
ruleCommands 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandsAccess().getGroup()); }
		(rule__Commands__Group__0)
		{ after(grammarAccess.getCommandsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCommand
entryRuleCommand
:
{ before(grammarAccess.getCommandRule()); }
	 ruleCommand
{ after(grammarAccess.getCommandRule()); } 
	 EOF 
;

// Rule Command
ruleCommand 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCommandAccess().getAlternatives()); }
		(rule__Command__Alternatives)
		{ after(grammarAccess.getCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWhile
entryRuleWhile
:
{ before(grammarAccess.getWhileRule()); }
	 ruleWhile
{ after(grammarAccess.getWhileRule()); } 
	 EOF 
;

// Rule While
ruleWhile 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWhileAccess().getGroup()); }
		(rule__While__Group__0)
		{ after(grammarAccess.getWhileAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleFor
entryRuleFor
:
{ before(grammarAccess.getForRule()); }
	 ruleFor
{ after(grammarAccess.getForRule()); } 
	 EOF 
;

// Rule For
ruleFor 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForAccess().getGroup()); }
		(rule__For__Group__0)
		{ after(grammarAccess.getForAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIf
entryRuleIf
:
{ before(grammarAccess.getIfRule()); }
	 ruleIf
{ after(grammarAccess.getIfRule()); } 
	 EOF 
;

// Rule If
ruleIf 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIfAccess().getGroup()); }
		(rule__If__Group__0)
		{ after(grammarAccess.getIfAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleForeach
entryRuleForeach
:
{ before(grammarAccess.getForeachRule()); }
	 ruleForeach
{ after(grammarAccess.getForeachRule()); } 
	 EOF 
;

// Rule Foreach
ruleForeach 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getForeachAccess().getGroup()); }
		(rule__Foreach__Group__0)
		{ after(grammarAccess.getForeachAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVars
entryRuleVars
:
{ before(grammarAccess.getVarsRule()); }
	 ruleVars
{ after(grammarAccess.getVarsRule()); } 
	 EOF 
;

// Rule Vars
ruleVars 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVarsAccess().getGroup()); }
		(rule__Vars__Group__0)
		{ after(grammarAccess.getVarsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprSimple
entryRuleExprSimple
:
{ before(grammarAccess.getExprSimpleRule()); }
	 ruleExprSimple
{ after(grammarAccess.getExprSimpleRule()); } 
	 EOF 
;

// Rule ExprSimple
ruleExprSimple 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprSimpleAccess().getAlternatives()); }
		(rule__ExprSimple__Alternatives)
		{ after(grammarAccess.getExprSimpleAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLExpr
entryRuleLExpr
:
{ before(grammarAccess.getLExprRule()); }
	 ruleLExpr
{ after(grammarAccess.getLExprRule()); } 
	 EOF 
;

// Rule LExpr
ruleLExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		(
			{ before(grammarAccess.getLExprAccess().getExprParserRuleCall()); }
			(ruleExpr)
			{ after(grammarAccess.getLExprAccess().getExprParserRuleCall()); }
		)
		(
			{ before(grammarAccess.getLExprAccess().getExprParserRuleCall()); }
			(ruleExpr)*
			{ after(grammarAccess.getLExprAccess().getExprParserRuleCall()); }
		)
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprs
entryRuleExprs
:
{ before(grammarAccess.getExprsRule()); }
	 ruleExprs
{ after(grammarAccess.getExprsRule()); } 
	 EOF 
;

// Rule Exprs
ruleExprs 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprsAccess().getGroup()); }
		(rule__Exprs__Group__0)
		{ after(grammarAccess.getExprsAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExpr
entryRuleExpr
:
{ before(grammarAccess.getExprRule()); }
	 ruleExpr
{ after(grammarAccess.getExprRule()); } 
	 EOF 
;

// Rule Expr
ruleExpr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprAccess().getAlternatives()); }
		(rule__Expr__Alternatives)
		{ after(grammarAccess.getExprAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprAnd
entryRuleExprAnd
:
{ before(grammarAccess.getExprAndRule()); }
	 ruleExprAnd
{ after(grammarAccess.getExprAndRule()); } 
	 EOF 
;

// Rule ExprAnd
ruleExprAnd 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprAndAccess().getGroup()); }
		(rule__ExprAnd__Group__0)
		{ after(grammarAccess.getExprAndAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprOr
entryRuleExprOr
:
{ before(grammarAccess.getExprOrRule()); }
	 ruleExprOr
{ after(grammarAccess.getExprOrRule()); } 
	 EOF 
;

// Rule ExprOr
ruleExprOr 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprOrAccess().getGroup()); }
		(rule__ExprOr__Group__0)
		{ after(grammarAccess.getExprOrAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprNot
entryRuleExprNot
:
{ before(grammarAccess.getExprNotRule()); }
	 ruleExprNot
{ after(grammarAccess.getExprNotRule()); } 
	 EOF 
;

// Rule ExprNot
ruleExprNot 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprNotAccess().getAlternatives()); }
		(rule__ExprNot__Alternatives)
		{ after(grammarAccess.getExprNotAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleExprEq
entryRuleExprEq
:
{ before(grammarAccess.getExprEqRule()); }
	 ruleExprEq
{ after(grammarAccess.getExprEqRule()); } 
	 EOF 
;

// Rule ExprEq
ruleExprEq 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getExprEqAccess().getAlternatives()); }
		(rule__ExprEq__Alternatives)
		{ after(grammarAccess.getExprEqAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLC
entryRuleLC
:
{ before(grammarAccess.getLCRule()); }
	 ruleLC
{ after(grammarAccess.getLCRule()); } 
	 EOF 
;

// Rule LC
ruleLC 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLCAccess().getAlternatives()); }
		(rule__LC__Alternatives)*
		{ after(grammarAccess.getLCAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCommandAccess().getNopKeyword_0()); }
		'nop'
		{ after(grammarAccess.getCommandAccess().getNopKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getWhileParserRuleCall_1()); }
		ruleWhile
		{ after(grammarAccess.getCommandAccess().getWhileParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getForParserRuleCall_2()); }
		ruleFor
		{ after(grammarAccess.getCommandAccess().getForParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getIfParserRuleCall_3()); }
		ruleIf
		{ after(grammarAccess.getCommandAccess().getIfParserRuleCall_3()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getForeachParserRuleCall_4()); }
		ruleForeach
		{ after(grammarAccess.getCommandAccess().getForeachParserRuleCall_4()); }
	)
	|
	(
		{ before(grammarAccess.getCommandAccess().getGroup_5()); }
		(rule__Command__Group_5__0)
		{ after(grammarAccess.getCommandAccess().getGroup_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Alternatives_8
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIfAccess().getGroup_8_0()); }
		(rule__If__Group_8_0__0)
		{ after(grammarAccess.getIfAccess().getGroup_8_0()); }
	)
	|
	(
		{ before(grammarAccess.getIfAccess().getFiKeyword_8_1()); }
		'fi'
		{ after(grammarAccess.getIfAccess().getFiKeyword_8_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getNilKeyword_0()); }
		'nil'
		{ after(grammarAccess.getExprSimpleAccess().getNilKeyword_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getVARIABLETerminalRuleCall_1()); }
		RULE_VARIABLE
		{ after(grammarAccess.getExprSimpleAccess().getVARIABLETerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getSYMBOLTerminalRuleCall_2()); }
		RULE_SYMBOL
		{ after(grammarAccess.getExprSimpleAccess().getSYMBOLTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getGroup_3()); }
		(rule__ExprSimple__Group_3__0)
		{ after(grammarAccess.getExprSimpleAccess().getGroup_3()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getGroup_4()); }
		(rule__ExprSimple__Group_4__0)
		{ after(grammarAccess.getExprSimpleAccess().getGroup_4()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getGroup_5()); }
		(rule__ExprSimple__Group_5__0)
		{ after(grammarAccess.getExprSimpleAccess().getGroup_5()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Alternatives_3_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getConsKeyword_3_1_0()); }
		'cons'
		{ after(grammarAccess.getExprSimpleAccess().getConsKeyword_3_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getListKeyword_3_1_1()); }
		'list'
		{ after(grammarAccess.getExprSimpleAccess().getListKeyword_3_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Alternatives_4_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprSimpleAccess().getHdKeyword_4_1_0()); }
		'hd'
		{ after(grammarAccess.getExprSimpleAccess().getHdKeyword_4_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprSimpleAccess().getTlKeyword_4_1_1()); }
		'tl'
		{ after(grammarAccess.getExprSimpleAccess().getTlKeyword_4_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Expr__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprAccess().getExprAndParserRuleCall_0()); }
		(ruleExprAnd)
		{ after(grammarAccess.getExprAccess().getExprAndParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprAccess().getExprSimpleParserRuleCall_1()); }
		ruleExprSimple
		{ after(grammarAccess.getExprAccess().getExprSimpleParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprNotAccess().getGroup_0()); }
		(rule__ExprNot__Group_0__0)
		{ after(grammarAccess.getExprNotAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprNotAccess().getExprEqParserRuleCall_1()); }
		ruleExprEq
		{ after(grammarAccess.getExprNotAccess().getExprEqParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getExprEqAccess().getGroup_0()); }
		(rule__ExprEq__Group_0__0)
		{ after(grammarAccess.getExprEqAccess().getGroup_0()); }
	)
	|
	(
		{ before(grammarAccess.getExprEqAccess().getGroup_1()); }
		(rule__ExprEq__Group_1__0)
		{ after(grammarAccess.getExprEqAccess().getGroup_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LC__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLCAccess().getSPTerminalRuleCall_0()); }
		RULE_SP
		{ after(grammarAccess.getLCAccess().getSPTerminalRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getLCAccess().getCRTerminalRuleCall_1()); }
		RULE_CR
		{ after(grammarAccess.getLCAccess().getCRTerminalRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getLCAccess().getTABTerminalRuleCall_2()); }
		RULE_TAB
		{ after(grammarAccess.getLCAccess().getTABTerminalRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getLCAccess().getLFTerminalRuleCall_3()); }
		RULE_LF
		{ after(grammarAccess.getLCAccess().getLFTerminalRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
	'function'
	{ after(grammarAccess.getFunctionAccess().getFunctionKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLCParserRuleCall_1()); }
	ruleLC
	{ after(grammarAccess.getFunctionAccess().getLCParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getSYMBOLTerminalRuleCall_2()); }
	RULE_SYMBOL
	{ after(grammarAccess.getFunctionAccess().getSYMBOLTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getColonKeyword_3()); }
	':'
	{ after(grammarAccess.getFunctionAccess().getColonKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLCParserRuleCall_4()); }
	ruleLC
	{ after(grammarAccess.getFunctionAccess().getLCParserRuleCall_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__5__Impl
	rule__Function__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getDefinitionParserRuleCall_5()); }
	ruleDefinition
	{ after(grammarAccess.getFunctionAccess().getDefinitionParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Function__Group__6__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getFunctionAccess().getLCParserRuleCall_6()); }
	ruleLC
	{ after(grammarAccess.getFunctionAccess().getLCParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Definition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__0__Impl
	rule__Definition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getReadKeyword_0()); }
	'read'
	{ after(grammarAccess.getDefinitionAccess().getReadKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__1__Impl
	rule__Definition__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCParserRuleCall_1()); }
	ruleLC
	{ after(grammarAccess.getDefinitionAccess().getLCParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__2__Impl
	rule__Definition__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getInputParserRuleCall_2()); }
	ruleInput
	{ after(grammarAccess.getDefinitionAccess().getInputParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__3__Impl
	rule__Definition__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCParserRuleCall_3()); }
	ruleLC
	{ after(grammarAccess.getDefinitionAccess().getLCParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__4__Impl
	rule__Definition__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_4()); }
	'%'
	{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__5__Impl
	rule__Definition__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCParserRuleCall_5()); }
	ruleLC
	{ after(grammarAccess.getDefinitionAccess().getLCParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__6__Impl
	rule__Definition__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getCommandsParserRuleCall_6()); }
	ruleCommands
	{ after(grammarAccess.getDefinitionAccess().getCommandsParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__7__Impl
	rule__Definition__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCParserRuleCall_7()); }
	ruleLC
	{ after(grammarAccess.getDefinitionAccess().getLCParserRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__8__Impl
	rule__Definition__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getPercentSignKeyword_8()); }
	'%'
	{ after(grammarAccess.getDefinitionAccess().getPercentSignKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__9__Impl
	rule__Definition__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCParserRuleCall_9()); }
	ruleLC
	{ after(grammarAccess.getDefinitionAccess().getLCParserRuleCall_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__10__Impl
	rule__Definition__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getWriteKeyword_10()); }
	'write'
	{ after(grammarAccess.getDefinitionAccess().getWriteKeyword_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__11__Impl
	rule__Definition__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getLCParserRuleCall_11()); }
	ruleLC
	{ after(grammarAccess.getDefinitionAccess().getLCParserRuleCall_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Definition__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Definition__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDefinitionAccess().getOutputParserRuleCall_12()); }
	ruleOutput
	{ after(grammarAccess.getDefinitionAccess().getOutputParserRuleCall_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__0__Impl
	rule__Input__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getVARIABLETerminalRuleCall_0()); }
	RULE_VARIABLE
	{ after(grammarAccess.getInputAccess().getVARIABLETerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getGroup_1()); }
	(rule__Input__Group_1__0)*
	{ after(grammarAccess.getInputAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Input__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_1__0__Impl
	rule__Input__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getInputAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Input__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Input__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getInputAccess().getVARIABLETerminalRuleCall_1_1()); }
	RULE_VARIABLE
	{ after(grammarAccess.getInputAccess().getVARIABLETerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__0__Impl
	rule__Output__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getVARIABLETerminalRuleCall_0()); }
	RULE_VARIABLE
	{ after(grammarAccess.getOutputAccess().getVARIABLETerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getGroup_1()); }
	(rule__Output__Group_1__0)*
	{ after(grammarAccess.getOutputAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Output__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_1__0__Impl
	rule__Output__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getOutputAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Output__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Output__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getOutputAccess().getVARIABLETerminalRuleCall_1_1()); }
	RULE_VARIABLE
	{ after(grammarAccess.getOutputAccess().getVARIABLETerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group__0__Impl
	rule__Commands__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getCommandParserRuleCall_0()); }
	ruleCommand
	{ after(grammarAccess.getCommandsAccess().getCommandParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group__1__Impl
	rule__Commands__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getGroup_1()); }
	(rule__Commands__Group_1__0)*
	{ after(grammarAccess.getCommandsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getSemicolonKeyword_2()); }
	(';')?
	{ after(grammarAccess.getCommandsAccess().getSemicolonKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Commands__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_1__0__Impl
	rule__Commands__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); }
	';'
	{ after(grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Commands__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Commands__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandsAccess().getCommandParserRuleCall_1_1()); }
	ruleCommand
	{ after(grammarAccess.getCommandsAccess().getCommandParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Command__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_5__0__Impl
	rule__Command__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getVarsParserRuleCall_5_0()); }
	ruleVars
	{ after(grammarAccess.getCommandAccess().getVarsParserRuleCall_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_5__1__Impl
	rule__Command__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getLCParserRuleCall_5_1()); }
	ruleLC
	{ after(grammarAccess.getCommandAccess().getLCParserRuleCall_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_5__2__Impl
	rule__Command__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getColonEqualsSignKeyword_5_2()); }
	':='
	{ after(grammarAccess.getCommandAccess().getColonEqualsSignKeyword_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_5__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_5__3__Impl
	rule__Command__Group_5__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_5__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getLCParserRuleCall_5_3()); }
	ruleLC
	{ after(grammarAccess.getCommandAccess().getLCParserRuleCall_5_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_5__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Command__Group_5__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Command__Group_5__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCommandAccess().getExprsParserRuleCall_5_4()); }
	ruleExprs
	{ after(grammarAccess.getCommandAccess().getExprsParserRuleCall_5_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__While__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__0__Impl
	rule__While__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
	'while'
	{ after(grammarAccess.getWhileAccess().getWhileKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__1__Impl
	rule__While__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_1()); }
	ruleLC
	{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__2__Impl
	rule__While__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getExprParserRuleCall_2()); }
	ruleExpr
	{ after(grammarAccess.getWhileAccess().getExprParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__3__Impl
	rule__While__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_3()); }
	ruleLC
	{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__4__Impl
	rule__While__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getDoKeyword_4()); }
	'do'
	{ after(grammarAccess.getWhileAccess().getDoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__5__Impl
	rule__While__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_5()); }
	ruleLC
	{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__6__Impl
	rule__While__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getCommandsParserRuleCall_6()); }
	ruleCommands
	{ after(grammarAccess.getWhileAccess().getCommandsParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__7__Impl
	rule__While__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getLCParserRuleCall_7()); }
	ruleLC
	{ after(grammarAccess.getWhileAccess().getLCParserRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__While__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__While__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getWhileAccess().getOdKeyword_8()); }
	'od'
	{ after(grammarAccess.getWhileAccess().getOdKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__For__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__0__Impl
	rule__For__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getForKeyword_0()); }
	'for'
	{ after(grammarAccess.getForAccess().getForKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__1__Impl
	rule__For__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getLCParserRuleCall_1()); }
	ruleLC
	{ after(grammarAccess.getForAccess().getLCParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__2__Impl
	rule__For__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getExprParserRuleCall_2()); }
	ruleExpr
	{ after(grammarAccess.getForAccess().getExprParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__3__Impl
	rule__For__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getLCParserRuleCall_3()); }
	ruleLC
	{ after(grammarAccess.getForAccess().getLCParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__4__Impl
	rule__For__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getDoKeyword_4()); }
	'do'
	{ after(grammarAccess.getForAccess().getDoKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__5__Impl
	rule__For__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getLCParserRuleCall_5()); }
	ruleLC
	{ after(grammarAccess.getForAccess().getLCParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__6__Impl
	rule__For__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getCommandsParserRuleCall_6()); }
	ruleCommands
	{ after(grammarAccess.getForAccess().getCommandsParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__7__Impl
	rule__For__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getLCParserRuleCall_7()); }
	ruleLC
	{ after(grammarAccess.getForAccess().getLCParserRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__For__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__For__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForAccess().getOdKeyword_8()); }
	'od'
	{ after(grammarAccess.getForAccess().getOdKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__0__Impl
	rule__If__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getIfKeyword_0()); }
	'if'
	{ after(grammarAccess.getIfAccess().getIfKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__1__Impl
	rule__If__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLCParserRuleCall_1()); }
	ruleLC
	{ after(grammarAccess.getIfAccess().getLCParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__2__Impl
	rule__If__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getExprParserRuleCall_2()); }
	ruleExpr
	{ after(grammarAccess.getIfAccess().getExprParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__3__Impl
	rule__If__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLCParserRuleCall_3()); }
	ruleLC
	{ after(grammarAccess.getIfAccess().getLCParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__4__Impl
	rule__If__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getThenKeyword_4()); }
	'then'
	{ after(grammarAccess.getIfAccess().getThenKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__5__Impl
	rule__If__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLCParserRuleCall_5()); }
	ruleLC
	{ after(grammarAccess.getIfAccess().getLCParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__6__Impl
	rule__If__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getCommandsParserRuleCall_6()); }
	ruleCommands
	{ after(grammarAccess.getIfAccess().getCommandsParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__7__Impl
	rule__If__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLCParserRuleCall_7()); }
	ruleLC
	{ after(grammarAccess.getIfAccess().getLCParserRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group__8__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getAlternatives_8()); }
	(rule__If__Alternatives_8)
	{ after(grammarAccess.getIfAccess().getAlternatives_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__If__Group_8_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8_0__0__Impl
	rule__If__Group_8_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getElseKeyword_8_0_0()); }
	'else'
	{ after(grammarAccess.getIfAccess().getElseKeyword_8_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8_0__1__Impl
	rule__If__Group_8_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLCParserRuleCall_8_0_1()); }
	ruleLC
	{ after(grammarAccess.getIfAccess().getLCParserRuleCall_8_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8_0__2__Impl
	rule__If__Group_8_0__3
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getCommandsParserRuleCall_8_0_2()); }
	ruleCommands
	{ after(grammarAccess.getIfAccess().getCommandsParserRuleCall_8_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8_0__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8_0__3__Impl
	rule__If__Group_8_0__4
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8_0__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getLCParserRuleCall_8_0_3()); }
	ruleLC
	{ after(grammarAccess.getIfAccess().getLCParserRuleCall_8_0_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8_0__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__If__Group_8_0__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__If__Group_8_0__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getIfAccess().getFiKeyword_8_0_4()); }
	'fi'
	{ after(grammarAccess.getIfAccess().getFiKeyword_8_0_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Foreach__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__0__Impl
	rule__Foreach__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getForeachKeyword_0()); }
	'foreach'
	{ after(grammarAccess.getForeachAccess().getForeachKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__1__Impl
	rule__Foreach__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_1()); }
	ruleLC
	{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__2__Impl
	rule__Foreach__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getExprParserRuleCall_2()); }
	ruleExpr
	{ after(grammarAccess.getForeachAccess().getExprParserRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__3__Impl
	rule__Foreach__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_3()); }
	ruleLC
	{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__4__Impl
	rule__Foreach__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getInKeyword_4()); }
	'in'
	{ after(grammarAccess.getForeachAccess().getInKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__5__Impl
	rule__Foreach__Group__6
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_5()); }
	ruleLC
	{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__6
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__6__Impl
	rule__Foreach__Group__7
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__6__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getExprParserRuleCall_6()); }
	ruleExpr
	{ after(grammarAccess.getForeachAccess().getExprParserRuleCall_6()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__7
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__7__Impl
	rule__Foreach__Group__8
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__7__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_7()); }
	ruleLC
	{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_7()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__8
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__8__Impl
	rule__Foreach__Group__9
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__8__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getDoKeyword_8()); }
	'do'
	{ after(grammarAccess.getForeachAccess().getDoKeyword_8()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__9
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__9__Impl
	rule__Foreach__Group__10
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__9__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_9()); }
	ruleLC
	{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_9()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__10
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__10__Impl
	rule__Foreach__Group__11
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__10__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getCommandsParserRuleCall_10()); }
	ruleCommands
	{ after(grammarAccess.getForeachAccess().getCommandsParserRuleCall_10()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__11
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__11__Impl
	rule__Foreach__Group__12
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__11__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getLCParserRuleCall_11()); }
	ruleLC
	{ after(grammarAccess.getForeachAccess().getLCParserRuleCall_11()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__12
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Foreach__Group__12__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Foreach__Group__12__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getForeachAccess().getOdKeyword_12()); }
	'od'
	{ after(grammarAccess.getForeachAccess().getOdKeyword_12()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vars__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group__0__Impl
	rule__Vars__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getVARIABLETerminalRuleCall_0()); }
	RULE_VARIABLE
	{ after(grammarAccess.getVarsAccess().getVARIABLETerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getGroup_1()); }
	(rule__Vars__Group_1__0)*
	{ after(grammarAccess.getVarsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Vars__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group_1__0__Impl
	rule__Vars__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getVarsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Vars__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Vars__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVarsAccess().getVARIABLETerminalRuleCall_1_1()); }
	RULE_VARIABLE
	{ after(grammarAccess.getVarsAccess().getVARIABLETerminalRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_3__0__Impl
	rule__ExprSimple__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_3__1__Impl
	rule__ExprSimple__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getAlternatives_3_1()); }
	(rule__ExprSimple__Alternatives_3_1)
	{ after(grammarAccess.getExprSimpleAccess().getAlternatives_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_3__2__Impl
	rule__ExprSimple__Group_3__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getLExprParserRuleCall_3_2()); }
	ruleLExpr
	{ after(grammarAccess.getExprSimpleAccess().getLExprParserRuleCall_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_3__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_3__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_3_3()); }
	')'
	{ after(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_3_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_4__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_4__0__Impl
	rule__ExprSimple__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_4_0()); }
	'('
	{ after(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_4_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_4__1__Impl
	rule__ExprSimple__Group_4__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getAlternatives_4_1()); }
	(rule__ExprSimple__Alternatives_4_1)
	{ after(grammarAccess.getExprSimpleAccess().getAlternatives_4_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_4__2__Impl
	rule__ExprSimple__Group_4__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getLCParserRuleCall_4_2()); }
	ruleLC
	{ after(grammarAccess.getExprSimpleAccess().getLCParserRuleCall_4_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_4__3__Impl
	rule__ExprSimple__Group_4__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getExprParserRuleCall_4_3()); }
	ruleExpr
	{ after(grammarAccess.getExprSimpleAccess().getExprParserRuleCall_4_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_4__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_4__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_4_4()); }
	')'
	{ after(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_4_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprSimple__Group_5__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_5__0__Impl
	rule__ExprSimple__Group_5__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_5_0()); }
	'('
	{ after(grammarAccess.getExprSimpleAccess().getLeftParenthesisKeyword_5_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_5__1__Impl
	rule__ExprSimple__Group_5__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getSYMBOLTerminalRuleCall_5_1()); }
	RULE_SYMBOL
	{ after(grammarAccess.getExprSimpleAccess().getSYMBOLTerminalRuleCall_5_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_5__2__Impl
	rule__ExprSimple__Group_5__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getLExprParserRuleCall_5_2()); }
	ruleLExpr
	{ after(grammarAccess.getExprSimpleAccess().getLExprParserRuleCall_5_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprSimple__Group_5__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprSimple__Group_5__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_5_3()); }
	')'
	{ after(grammarAccess.getExprSimpleAccess().getRightParenthesisKeyword_5_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exprs__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group__0__Impl
	rule__Exprs__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getExprParserRuleCall_0()); }
	ruleExpr
	{ after(grammarAccess.getExprsAccess().getExprParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getGroup_1()); }
	(rule__Exprs__Group_1__0)*
	{ after(grammarAccess.getExprsAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Exprs__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group_1__0__Impl
	rule__Exprs__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getCommaKeyword_1_0()); }
	','
	{ after(grammarAccess.getExprsAccess().getCommaKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group_1__1__Impl
	rule__Exprs__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getLCParserRuleCall_1_1()); }
	ruleLC
	{ after(grammarAccess.getExprsAccess().getLCParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Exprs__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Exprs__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprsAccess().getExprParserRuleCall_1_2()); }
	ruleExpr
	{ after(grammarAccess.getExprsAccess().getExprParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprAnd__Group__0__Impl
	rule__ExprAnd__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_0()); }
	ruleExprOr
	{ after(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprAnd__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAndAccess().getGroup_1()); }
	(rule__ExprAnd__Group_1__0)*
	{ after(grammarAccess.getExprAndAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprAnd__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprAnd__Group_1__0__Impl
	rule__ExprAnd__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_0()); }
	ruleLC
	{ after(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprAnd__Group_1__1__Impl
	rule__ExprAnd__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAndAccess().getAndKeyword_1_1()); }
	'and'
	{ after(grammarAccess.getExprAndAccess().getAndKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprAnd__Group_1__2__Impl
	rule__ExprAnd__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_2()); }
	ruleLC
	{ after(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprAnd__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprAnd__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_1_3()); }
	ruleExprOr
	{ after(grammarAccess.getExprAndAccess().getExprOrParserRuleCall_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprOr__Group__0__Impl
	rule__ExprOr__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprOrAccess().getExprNotParserRuleCall_0()); }
	ruleExprNot
	{ after(grammarAccess.getExprOrAccess().getExprNotParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprOr__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprOrAccess().getGroup_1()); }
	(rule__ExprOr__Group_1__0)*
	{ after(grammarAccess.getExprOrAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprOr__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprOr__Group_1__0__Impl
	rule__ExprOr__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_0()); }
	ruleLC
	{ after(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprOr__Group_1__1__Impl
	rule__ExprOr__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprOrAccess().getOrKeyword_1_1()); }
	'or'
	{ after(grammarAccess.getExprOrAccess().getOrKeyword_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprOr__Group_1__2__Impl
	rule__ExprOr__Group_1__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_2()); }
	ruleLC
	{ after(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprOr__Group_1__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprOr__Group_1__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprOrAccess().getExprNotParserRuleCall_1_3()); }
	ruleExprNot
	{ after(grammarAccess.getExprOrAccess().getExprNotParserRuleCall_1_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprNot__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprNot__Group_0__0__Impl
	rule__ExprNot__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprNotAccess().getNotKeyword_0_0()); }
	'not'
	{ after(grammarAccess.getExprNotAccess().getNotKeyword_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprNot__Group_0__1__Impl
	rule__ExprNot__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprNotAccess().getLCParserRuleCall_0_1()); }
	ruleLC
	{ after(grammarAccess.getExprNotAccess().getLCParserRuleCall_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprNot__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprNot__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprNotAccess().getExprEqParserRuleCall_0_2()); }
	ruleExprEq
	{ after(grammarAccess.getExprNotAccess().getExprEqParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_0__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_0__0__Impl
	rule__ExprEq__Group_0__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getExprSimpleParserRuleCall_0_0()); }
	ruleExprSimple
	{ after(grammarAccess.getExprEqAccess().getExprSimpleParserRuleCall_0_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_0__1__Impl
	rule__ExprEq__Group_0__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_1()); }
	'=?'
	{ after(grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_0_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_0__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_0__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getExprSimpleParserRuleCall_0_2()); }
	ruleExprSimple
	{ after(grammarAccess.getExprEqAccess().getExprSimpleParserRuleCall_0_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ExprEq__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_1__0__Impl
	rule__ExprEq__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_1_0()); }
	'('
	{ after(grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_1__1__Impl
	rule__ExprEq__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getExprParserRuleCall_1_1()); }
	ruleExpr
	{ after(grammarAccess.getExprEqAccess().getExprParserRuleCall_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ExprEq__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ExprEq__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getExprEqAccess().getRightParenthesisKeyword_1_2()); }
	')'
	{ after(grammarAccess.getExprEqAccess().getRightParenthesisKeyword_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__ProgramAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProgramFunctionParserRuleCall_0()); }
		ruleFunction
		{ after(grammarAccess.getModelAccess().getProgramFunctionParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_VARIABLE : 'A'..'Z' ('0'..'9'|'a'..'z'|'A'..'Z')* ('?'|'!')?;

RULE_SYMBOL : 'a'..'z' ('0'..'9'|'a'..'z'|'A'..'Z')* ('?'|'!')?;

RULE_SP : ' ';

RULE_CR : '\n';

RULE_TAB : '\t';

RULE_LF : '\r';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
