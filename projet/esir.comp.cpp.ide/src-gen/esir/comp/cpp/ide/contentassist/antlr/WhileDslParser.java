/*
 * generated by Xtext 2.19.0
 */
package esir.comp.cpp.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import esir.comp.cpp.ide.contentassist.antlr.internal.InternalWhileDslParser;
import esir.comp.cpp.services.WhileDslGrammarAccess;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class WhileDslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(WhileDslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, WhileDslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getCommandAccess().getAlternatives(), "rule__Command__Alternatives");
			builder.put(grammarAccess.getExprSimpleAccess().getAlternatives(), "rule__ExprSimple__Alternatives");
			builder.put(grammarAccess.getExprSimpleAccess().getAlternatives_3_1(), "rule__ExprSimple__Alternatives_3_1");
			builder.put(grammarAccess.getExprSimpleAccess().getAlternatives_4_1(), "rule__ExprSimple__Alternatives_4_1");
			builder.put(grammarAccess.getExprAccess().getAlternatives(), "rule__Expr__Alternatives");
			builder.put(grammarAccess.getExprNotAccess().getAlternatives(), "rule__ExprNot__Alternatives");
			builder.put(grammarAccess.getExprEqAccess().getAlternatives(), "rule__ExprEq__Alternatives");
			builder.put(grammarAccess.getLCAccess().getAlternatives(), "rule__LC__Alternatives");
			builder.put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
			builder.put(grammarAccess.getDefinitionAccess().getGroup(), "rule__Definition__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup(), "rule__Input__Group__0");
			builder.put(grammarAccess.getInputAccess().getGroup_1(), "rule__Input__Group_1__0");
			builder.put(grammarAccess.getOutputAccess().getGroup(), "rule__Output__Group__0");
			builder.put(grammarAccess.getOutputAccess().getGroup_1(), "rule__Output__Group_1__0");
			builder.put(grammarAccess.getCommandsAccess().getGroup(), "rule__Commands__Group__0");
			builder.put(grammarAccess.getCommandsAccess().getGroup_1(), "rule__Commands__Group_1__0");
			builder.put(grammarAccess.getCommandAccess().getGroup_0(), "rule__Command__Group_0__0");
			builder.put(grammarAccess.getWhileCommandAccess().getGroup(), "rule__WhileCommand__Group__0");
			builder.put(grammarAccess.getForCommandAccess().getGroup(), "rule__ForCommand__Group__0");
			builder.put(grammarAccess.getIfCommandAccess().getGroup(), "rule__IfCommand__Group__0");
			builder.put(grammarAccess.getIfCommandAccess().getGroup_8(), "rule__IfCommand__Group_8__0");
			builder.put(grammarAccess.getForeachCommandAccess().getGroup(), "rule__ForeachCommand__Group__0");
			builder.put(grammarAccess.getVarsCommandAccess().getGroup(), "rule__VarsCommand__Group__0");
			builder.put(grammarAccess.getVarsAccess().getGroup(), "rule__Vars__Group__0");
			builder.put(grammarAccess.getVarsAccess().getGroup_1(), "rule__Vars__Group_1__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_3(), "rule__ExprSimple__Group_3__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_4(), "rule__ExprSimple__Group_4__0");
			builder.put(grammarAccess.getExprSimpleAccess().getGroup_5(), "rule__ExprSimple__Group_5__0");
			builder.put(grammarAccess.getExprsAccess().getGroup(), "rule__Exprs__Group__0");
			builder.put(grammarAccess.getExprsAccess().getGroup_1(), "rule__Exprs__Group_1__0");
			builder.put(grammarAccess.getExprAndAccess().getGroup(), "rule__ExprAnd__Group__0");
			builder.put(grammarAccess.getExprAndAccess().getGroup_1(), "rule__ExprAnd__Group_1__0");
			builder.put(grammarAccess.getExprOrAccess().getGroup(), "rule__ExprOr__Group__0");
			builder.put(grammarAccess.getExprOrAccess().getGroup_1(), "rule__ExprOr__Group_1__0");
			builder.put(grammarAccess.getExprNotAccess().getGroup_0(), "rule__ExprNot__Group_0__0");
			builder.put(grammarAccess.getExprEqAccess().getGroup_0(), "rule__ExprEq__Group_0__0");
			builder.put(grammarAccess.getExprEqAccess().getGroup_1(), "rule__ExprEq__Group_1__0");
			builder.put(grammarAccess.getModelAccess().getProgramAssignment(), "rule__Model__ProgramAssignment");
			builder.put(grammarAccess.getFunctionAccess().getFunctionNameAssignment_2(), "rule__Function__FunctionNameAssignment_2");
			builder.put(grammarAccess.getFunctionAccess().getFunctionDefinitionAssignment_6(), "rule__Function__FunctionDefinitionAssignment_6");
			builder.put(grammarAccess.getDefinitionAccess().getIntputAssignment_2(), "rule__Definition__IntputAssignment_2");
			builder.put(grammarAccess.getDefinitionAccess().getBodyAssignment_6(), "rule__Definition__BodyAssignment_6");
			builder.put(grammarAccess.getDefinitionAccess().getOutputAssignment_12(), "rule__Definition__OutputAssignment_12");
			builder.put(grammarAccess.getCommandsAccess().getCommandsAssignment_0(), "rule__Commands__CommandsAssignment_0");
			builder.put(grammarAccess.getCommandsAccess().getCommandsAssignment_1_2(), "rule__Commands__CommandsAssignment_1_2");
			builder.put(grammarAccess.getWhileCommandAccess().getCondAssignment_2(), "rule__WhileCommand__CondAssignment_2");
			builder.put(grammarAccess.getWhileCommandAccess().getBodyAssignment_6(), "rule__WhileCommand__BodyAssignment_6");
			builder.put(grammarAccess.getForCommandAccess().getCondAssignment_2(), "rule__ForCommand__CondAssignment_2");
			builder.put(grammarAccess.getForCommandAccess().getBodyAssignment_6(), "rule__ForCommand__BodyAssignment_6");
			builder.put(grammarAccess.getIfCommandAccess().getCondAssignment_2(), "rule__IfCommand__CondAssignment_2");
			builder.put(grammarAccess.getIfCommandAccess().getThenBodyAssignment_6(), "rule__IfCommand__ThenBodyAssignment_6");
			builder.put(grammarAccess.getIfCommandAccess().getElseBodyAssignment_8_2(), "rule__IfCommand__ElseBodyAssignment_8_2");
			builder.put(grammarAccess.getForeachCommandAccess().getExpElementAssignment_2(), "rule__ForeachCommand__ExpElementAssignment_2");
			builder.put(grammarAccess.getForeachCommandAccess().getExpListAssignment_6(), "rule__ForeachCommand__ExpListAssignment_6");
			builder.put(grammarAccess.getForeachCommandAccess().getBodyAssignment_10(), "rule__ForeachCommand__BodyAssignment_10");
			builder.put(grammarAccess.getVarsCommandAccess().getVariablesAssignment_0(), "rule__VarsCommand__VariablesAssignment_0");
			builder.put(grammarAccess.getVarsCommandAccess().getValuesAssignment_4(), "rule__VarsCommand__ValuesAssignment_4");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private WhileDslGrammarAccess grammarAccess;

	@Override
	protected InternalWhileDslParser createParser() {
		InternalWhileDslParser result = new InternalWhileDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public WhileDslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(WhileDslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
