/*
 * generated by Xtext 2.19.0
 */
grammar InternalWhileDsl;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package esir.comp.cpp.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package esir.comp.cpp.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import esir.comp.cpp.services.WhileDslGrammarAccess;

}

@parser::members {

 	private WhileDslGrammarAccess grammarAccess;

    public InternalWhileDslParser(TokenStream input, WhileDslGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected WhileDslGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				newCompositeNode(grammarAccess.getModelAccess().getProgramFunctionParserRuleCall_0());
			}
			lv_program_0_0=ruleFunction
			{
				if ($current==null) {
					$current = createModelElementForParent(grammarAccess.getModelRule());
				}
				add(
					$current,
					"program",
					lv_program_0_0,
					"esir.comp.cpp.WhileDsl.Function");
				afterParserOrEnumRuleCall();
			}
		)
	)*
;

// Entry rule entryRuleFunction
entryRuleFunction returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getFunctionRule()); }
	iv_ruleFunction=ruleFunction
	{ $current=$iv_ruleFunction.current; }
	EOF;

// Rule Function
ruleFunction returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='function'
		{
			newLeafNode(otherlv_0, grammarAccess.getFunctionAccess().getFunctionKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_functionName_2_0=RULE_SYMBOL
				{
					newLeafNode(lv_functionName_2_0, grammarAccess.getFunctionAccess().getFunctionNameSYMBOLTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getFunctionRule());
					}
					setWithLastConsumed(
						$current,
						"functionName",
						lv_functionName_2_0,
						"esir.comp.cpp.WhileDsl.SYMBOL");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4=':'
		{
			newLeafNode(otherlv_4, grammarAccess.getFunctionAccess().getColonKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getFunctionAccess().getFunctionDefinitionDefinitionParserRuleCall_6_0());
				}
				lv_functionDefinition_6_0=ruleDefinition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getFunctionRule());
					}
					set(
						$current,
						"functionDefinition",
						lv_functionDefinition_6_0,
						"esir.comp.cpp.WhileDsl.Definition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getFunctionAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleDefinition
entryRuleDefinition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDefinitionRule()); }
	iv_ruleDefinition=ruleDefinition
	{ $current=$iv_ruleDefinition.current; }
	EOF;

// Rule Definition
ruleDefinition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='read'
		{
			newLeafNode(otherlv_0, grammarAccess.getDefinitionAccess().getReadKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getIntputInputParserRuleCall_2_0());
				}
				lv_intput_2_0=ruleInput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					set(
						$current,
						"intput",
						lv_intput_2_0,
						"esir.comp.cpp.WhileDsl.Input");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='%'
		{
			newLeafNode(otherlv_4, grammarAccess.getDefinitionAccess().getPercentSignKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getBodyCommandsParserRuleCall_6_0());
				}
				lv_body_6_0=ruleCommands
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"esir.comp.cpp.WhileDsl.Commands");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_8='%'
		{
			newLeafNode(otherlv_8, grammarAccess.getDefinitionAccess().getPercentSignKeyword_8());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getLCParserRuleCall_9());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_10='write'
		{
			newLeafNode(otherlv_10, grammarAccess.getDefinitionAccess().getWriteKeyword_10());
		}
		{
			newCompositeNode(grammarAccess.getDefinitionAccess().getLCParserRuleCall_11());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getDefinitionAccess().getOutputOutputParserRuleCall_12_0());
				}
				lv_output_12_0=ruleOutput
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getDefinitionRule());
					}
					set(
						$current,
						"output",
						lv_output_12_0,
						"esir.comp.cpp.WhileDsl.Output");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleInput
entryRuleInput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getInputRule()); }
	iv_ruleInput=ruleInput
	{ $current=$iv_ruleInput.current; }
	EOF;

// Rule Input
ruleInput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variables_0_0=RULE_VARIABLE
				{
					newLeafNode(lv_variables_0_0, grammarAccess.getInputAccess().getVariablesVARIABLETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getInputRule());
					}
					addWithLastConsumed(
						$current,
						"variables",
						lv_variables_0_0,
						"esir.comp.cpp.WhileDsl.VARIABLE");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getInputAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_variables_2_0=RULE_VARIABLE
					{
						newLeafNode(lv_variables_2_0, grammarAccess.getInputAccess().getVariablesVARIABLETerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getInputRule());
						}
						addWithLastConsumed(
							$current,
							"variables",
							lv_variables_2_0,
							"esir.comp.cpp.WhileDsl.VARIABLE");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOutput
entryRuleOutput returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOutputRule()); }
	iv_ruleOutput=ruleOutput
	{ $current=$iv_ruleOutput.current; }
	EOF;

// Rule Output
ruleOutput returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variables_0_0=RULE_VARIABLE
				{
					newLeafNode(lv_variables_0_0, grammarAccess.getOutputAccess().getVariablesVARIABLETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getOutputRule());
					}
					addWithLastConsumed(
						$current,
						"variables",
						lv_variables_0_0,
						"esir.comp.cpp.WhileDsl.VARIABLE");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getOutputAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_variables_2_0=RULE_VARIABLE
					{
						newLeafNode(lv_variables_2_0, grammarAccess.getOutputAccess().getVariablesVARIABLETerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getOutputRule());
						}
						addWithLastConsumed(
							$current,
							"variables",
							lv_variables_2_0,
							"esir.comp.cpp.WhileDsl.VARIABLE");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCommands
entryRuleCommands returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandsRule()); }
	iv_ruleCommands=ruleCommands
	{ $current=$iv_ruleCommands.current; }
	EOF;

// Rule Commands
ruleCommands returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getCommandsAccess().getCommandsCommandParserRuleCall_0_0());
				}
				lv_commands_0_0=ruleCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCommandsRule());
					}
					add(
						$current,
						"commands",
						lv_commands_0_0,
						"esir.comp.cpp.WhileDsl.Command");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=';'
			{
				newLeafNode(otherlv_1, grammarAccess.getCommandsAccess().getSemicolonKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getCommandsAccess().getLCParserRuleCall_1_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getCommandsAccess().getCommandsCommandParserRuleCall_1_2_0());
					}
					lv_commands_3_0=ruleCommand
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getCommandsRule());
						}
						add(
							$current,
							"commands",
							lv_commands_3_0,
							"esir.comp.cpp.WhileDsl.Command");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleCommand
entryRuleCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCommandRule()); }
	iv_ruleCommand=ruleCommand
	{ $current=$iv_ruleCommand.current; }
	EOF;

// Rule Command
ruleCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					$current = forceCreateModelElement(
						grammarAccess.getCommandAccess().getNopCommandAction_0_0(),
						$current);
				}
			)
			{
				newCompositeNode(grammarAccess.getCommandAccess().getNopCommandParserRuleCall_0_1());
			}
			ruleNopCommand
			{
				afterParserOrEnumRuleCall();
			}
		)
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getWhileCommandParserRuleCall_1());
		}
		this_WhileCommand_2=ruleWhileCommand
		{
			$current = $this_WhileCommand_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getForCommandParserRuleCall_2());
		}
		this_ForCommand_3=ruleForCommand
		{
			$current = $this_ForCommand_3.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getIfCommandParserRuleCall_3());
		}
		this_IfCommand_4=ruleIfCommand
		{
			$current = $this_IfCommand_4.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getForeachCommandParserRuleCall_4());
		}
		this_ForeachCommand_5=ruleForeachCommand
		{
			$current = $this_ForeachCommand_5.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getCommandAccess().getVarsCommandParserRuleCall_5());
		}
		this_VarsCommand_6=ruleVarsCommand
		{
			$current = $this_VarsCommand_6.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleWhileCommand
entryRuleWhileCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWhileCommandRule()); }
	iv_ruleWhileCommand=ruleWhileCommand
	{ $current=$iv_ruleWhileCommand.current; }
	EOF;

// Rule WhileCommand
ruleWhileCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='while'
		{
			newLeafNode(otherlv_0, grammarAccess.getWhileCommandAccess().getWhileKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getWhileCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileCommandAccess().getCondExprParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileCommandRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"esir.comp.cpp.WhileDsl.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getWhileCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='do'
		{
			newLeafNode(otherlv_4, grammarAccess.getWhileCommandAccess().getDoKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getWhileCommandAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getWhileCommandAccess().getBodyCommandsParserRuleCall_6_0());
				}
				lv_body_6_0=ruleCommands
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getWhileCommandRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"esir.comp.cpp.WhileDsl.Commands");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getWhileCommandAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_8='od'
		{
			newLeafNode(otherlv_8, grammarAccess.getWhileCommandAccess().getOdKeyword_8());
		}
	)
;

// Entry rule entryRuleForCommand
entryRuleForCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForCommandRule()); }
	iv_ruleForCommand=ruleForCommand
	{ $current=$iv_ruleForCommand.current; }
	EOF;

// Rule ForCommand
ruleForCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='for'
		{
			newLeafNode(otherlv_0, grammarAccess.getForCommandAccess().getForKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getForCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForCommandAccess().getCondExprParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForCommandRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"esir.comp.cpp.WhileDsl.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getForCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='do'
		{
			newLeafNode(otherlv_4, grammarAccess.getForCommandAccess().getDoKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getForCommandAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForCommandAccess().getBodyCommandsParserRuleCall_6_0());
				}
				lv_body_6_0=ruleCommands
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForCommandRule());
					}
					set(
						$current,
						"body",
						lv_body_6_0,
						"esir.comp.cpp.WhileDsl.Commands");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getForCommandAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_8='od'
		{
			newLeafNode(otherlv_8, grammarAccess.getForCommandAccess().getOdKeyword_8());
		}
	)
;

// Entry rule entryRuleIfCommand
entryRuleIfCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIfCommandRule()); }
	iv_ruleIfCommand=ruleIfCommand
	{ $current=$iv_ruleIfCommand.current; }
	EOF;

// Rule IfCommand
ruleIfCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='if'
		{
			newLeafNode(otherlv_0, grammarAccess.getIfCommandAccess().getIfKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfCommandAccess().getCondExprParserRuleCall_2_0());
				}
				lv_cond_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfCommandRule());
					}
					set(
						$current,
						"cond",
						lv_cond_2_0,
						"esir.comp.cpp.WhileDsl.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='then'
		{
			newLeafNode(otherlv_4, grammarAccess.getIfCommandAccess().getThenKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getIfCommandAccess().getThenBodyCommandsParserRuleCall_6_0());
				}
				lv_thenBody_6_0=ruleCommands
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getIfCommandRule());
					}
					set(
						$current,
						"thenBody",
						lv_thenBody_6_0,
						"esir.comp.cpp.WhileDsl.Commands");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			otherlv_8='else'
			{
				newLeafNode(otherlv_8, grammarAccess.getIfCommandAccess().getElseKeyword_8_0());
			}
			{
				newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_8_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getIfCommandAccess().getElseBodyCommandsParserRuleCall_8_2_0());
					}
					lv_elseBody_10_0=ruleCommands
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getIfCommandRule());
						}
						set(
							$current,
							"elseBody",
							lv_elseBody_10_0,
							"esir.comp.cpp.WhileDsl.Commands");
						afterParserOrEnumRuleCall();
					}
				)
			)
			{
				newCompositeNode(grammarAccess.getIfCommandAccess().getLCParserRuleCall_8_3());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
		)?
		otherlv_12='fi'
		{
			newLeafNode(otherlv_12, grammarAccess.getIfCommandAccess().getFiKeyword_9());
		}
	)
;

// Entry rule entryRuleForeachCommand
entryRuleForeachCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getForeachCommandRule()); }
	iv_ruleForeachCommand=ruleForeachCommand
	{ $current=$iv_ruleForeachCommand.current; }
	EOF;

// Rule ForeachCommand
ruleForeachCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='foreach'
		{
			newLeafNode(otherlv_0, grammarAccess.getForeachCommandAccess().getForeachKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getForeachCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForeachCommandAccess().getExpElementExprParserRuleCall_2_0());
				}
				lv_expElement_2_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForeachCommandRule());
					}
					set(
						$current,
						"expElement",
						lv_expElement_2_0,
						"esir.comp.cpp.WhileDsl.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getForeachCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_4='in'
		{
			newLeafNode(otherlv_4, grammarAccess.getForeachCommandAccess().getInKeyword_4());
		}
		{
			newCompositeNode(grammarAccess.getForeachCommandAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForeachCommandAccess().getExpListExprParserRuleCall_6_0());
				}
				lv_expList_6_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForeachCommandRule());
					}
					set(
						$current,
						"expList",
						lv_expList_6_0,
						"esir.comp.cpp.WhileDsl.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getForeachCommandAccess().getLCParserRuleCall_7());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_8='do'
		{
			newLeafNode(otherlv_8, grammarAccess.getForeachCommandAccess().getDoKeyword_8());
		}
		{
			newCompositeNode(grammarAccess.getForeachCommandAccess().getLCParserRuleCall_9());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getForeachCommandAccess().getBodyCommandsParserRuleCall_10_0());
				}
				lv_body_10_0=ruleCommands
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getForeachCommandRule());
					}
					set(
						$current,
						"body",
						lv_body_10_0,
						"esir.comp.cpp.WhileDsl.Commands");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getForeachCommandAccess().getLCParserRuleCall_11());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_12='od'
		{
			newLeafNode(otherlv_12, grammarAccess.getForeachCommandAccess().getOdKeyword_12());
		}
	)
;

// Entry rule entryRuleVarsCommand
entryRuleVarsCommand returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarsCommandRule()); }
	iv_ruleVarsCommand=ruleVarsCommand
	{ $current=$iv_ruleVarsCommand.current; }
	EOF;

// Rule VarsCommand
ruleVarsCommand returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getVarsCommandAccess().getVariablesVarsParserRuleCall_0_0());
				}
				lv_variables_0_0=ruleVars
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarsCommandRule());
					}
					set(
						$current,
						"variables",
						lv_variables_0_0,
						"esir.comp.cpp.WhileDsl.Vars");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getVarsCommandAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_2=':='
		{
			newLeafNode(otherlv_2, grammarAccess.getVarsCommandAccess().getColonEqualsSignKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getVarsCommandAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getVarsCommandAccess().getValuesExprsParserRuleCall_4_0());
				}
				lv_values_4_0=ruleExprs
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getVarsCommandRule());
					}
					set(
						$current,
						"values",
						lv_values_4_0,
						"esir.comp.cpp.WhileDsl.Exprs");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleNopCommand
entryRuleNopCommand returns [String current=null]:
	{ newCompositeNode(grammarAccess.getNopCommandRule()); }
	iv_ruleNopCommand=ruleNopCommand
	{ $current=$iv_ruleNopCommand.current.getText(); }
	EOF;

// Rule NopCommand
ruleNopCommand returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	kw='nop'
	{
		$current.merge(kw);
		newLeafNode(kw, grammarAccess.getNopCommandAccess().getNopKeyword());
	}
;

// Entry rule entryRuleVars
entryRuleVars returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVarsRule()); }
	iv_ruleVars=ruleVars
	{ $current=$iv_ruleVars.current; }
	EOF;

// Rule Vars
ruleVars returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_variables_0_0=RULE_VARIABLE
				{
					newLeafNode(lv_variables_0_0, grammarAccess.getVarsAccess().getVariablesVARIABLETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVarsRule());
					}
					addWithLastConsumed(
						$current,
						"variables",
						lv_variables_0_0,
						"esir.comp.cpp.WhileDsl.VARIABLE");
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getVarsAccess().getCommaKeyword_1_0());
			}
			(
				(
					lv_variables_2_0=RULE_VARIABLE
					{
						newLeafNode(lv_variables_2_0, grammarAccess.getVarsAccess().getVariablesVARIABLETerminalRuleCall_1_1_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getVarsRule());
						}
						addWithLastConsumed(
							$current,
							"variables",
							lv_variables_2_0,
							"esir.comp.cpp.WhileDsl.VARIABLE");
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExprSimple
entryRuleExprSimple returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprSimpleRule()); }
	iv_ruleExprSimple=ruleExprSimple
	{ $current=$iv_ruleExprSimple.current; }
	EOF;

// Rule ExprSimple
ruleExprSimple returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_term_0_0=RULE_VARIABLE
				{
					newLeafNode(lv_term_0_0, grammarAccess.getExprSimpleAccess().getTermVARIABLETerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExprSimpleRule());
					}
					setWithLastConsumed(
						$current,
						"term",
						lv_term_0_0,
						"esir.comp.cpp.WhileDsl.VARIABLE");
				}
			)
		)
		    |
		(
			(
				lv_term_1_0=RULE_SYMBOL
				{
					newLeafNode(lv_term_1_0, grammarAccess.getExprSimpleAccess().getTermSYMBOLTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExprSimpleRule());
					}
					setWithLastConsumed(
						$current,
						"term",
						lv_term_1_0,
						"esir.comp.cpp.WhileDsl.SYMBOL");
				}
			)
		)
		    |
		(
			(
				lv_term_2_0='nil'
				{
					newLeafNode(lv_term_2_0, grammarAccess.getExprSimpleAccess().getTermNilKeyword_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExprSimpleRule());
					}
					setWithLastConsumed($current, "term", lv_term_2_0, "nil");
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSimpleAccess().getExpressionExprSimpleWithLExprParserRuleCall_3_0());
				}
				lv_expression_3_0=ruleExprSimpleWithLExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSimpleRule());
					}
					set(
						$current,
						"expression",
						lv_expression_3_0,
						"esir.comp.cpp.WhileDsl.ExprSimpleWithLExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSimpleAccess().getExpressionExprSimpleWithExprParserRuleCall_4_0());
				}
				lv_expression_4_0=ruleExprSimpleWithExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSimpleRule());
					}
					set(
						$current,
						"expression",
						lv_expression_4_0,
						"esir.comp.cpp.WhileDsl.ExprSimpleWithExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSimpleAccess().getExpressionExprSimpleWithSymbolLExprParserRuleCall_5_0());
				}
				lv_expression_5_0=ruleExprSimpleWithSymbolLExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSimpleRule());
					}
					set(
						$current,
						"expression",
						lv_expression_5_0,
						"esir.comp.cpp.WhileDsl.ExprSimpleWithSymbolLExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExprSimpleWithLExpr
entryRuleExprSimpleWithLExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprSimpleWithLExprRule()); }
	iv_ruleExprSimpleWithLExpr=ruleExprSimpleWithLExpr
	{ $current=$iv_ruleExprSimpleWithLExpr.current; }
	EOF;

// Rule ExprSimpleWithLExpr
ruleExprSimpleWithLExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExprSimpleWithLExprAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					lv_operation_1_1='cons'
					{
						newLeafNode(lv_operation_1_1, grammarAccess.getExprSimpleWithLExprAccess().getOperationConsKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprSimpleWithLExprRule());
						}
						setWithLastConsumed($current, "operation", lv_operation_1_1, null);
					}
					    |
					lv_operation_1_2='list'
					{
						newLeafNode(lv_operation_1_2, grammarAccess.getExprSimpleWithLExprAccess().getOperationListKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprSimpleWithLExprRule());
						}
						setWithLastConsumed($current, "operation", lv_operation_1_2, null);
					}
				)
			)
		)
		{
			newCompositeNode(grammarAccess.getExprSimpleWithLExprAccess().getLCParserRuleCall_2());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSimpleWithLExprAccess().getLexprLExprParserRuleCall_3_0());
				}
				lv_lexpr_3_0=ruleLExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSimpleWithLExprRule());
					}
					set(
						$current,
						"lexpr",
						lv_lexpr_3_0,
						"esir.comp.cpp.WhileDsl.LExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getExprSimpleWithLExprAccess().getLCParserRuleCall_4());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getExprSimpleWithLExprAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleExprSimpleWithExpr
entryRuleExprSimpleWithExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprSimpleWithExprRule()); }
	iv_ruleExprSimpleWithExpr=ruleExprSimpleWithExpr
	{ $current=$iv_ruleExprSimpleWithExpr.current; }
	EOF;

// Rule ExprSimpleWithExpr
ruleExprSimpleWithExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExprSimpleWithExprAccess().getLeftParenthesisKeyword_0());
		}
		(
			(
				(
					lv_operation_1_1='hd'
					{
						newLeafNode(lv_operation_1_1, grammarAccess.getExprSimpleWithExprAccess().getOperationHdKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprSimpleWithExprRule());
						}
						setWithLastConsumed($current, "operation", lv_operation_1_1, null);
					}
					    |
					lv_operation_1_2='tl'
					{
						newLeafNode(lv_operation_1_2, grammarAccess.getExprSimpleWithExprAccess().getOperationTlKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprSimpleWithExprRule());
						}
						setWithLastConsumed($current, "operation", lv_operation_1_2, null);
					}
				)
			)
		)
		{
			newCompositeNode(grammarAccess.getExprSimpleWithExprAccess().getLCParserRuleCall_2());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSimpleWithExprAccess().getExprExprParserRuleCall_3_0());
				}
				lv_expr_3_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSimpleWithExprRule());
					}
					set(
						$current,
						"expr",
						lv_expr_3_0,
						"esir.comp.cpp.WhileDsl.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getExprSimpleWithExprAccess().getLCParserRuleCall_4());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_5=')'
		{
			newLeafNode(otherlv_5, grammarAccess.getExprSimpleWithExprAccess().getRightParenthesisKeyword_5());
		}
	)
;

// Entry rule entryRuleExprSimpleWithSymbolLExpr
entryRuleExprSimpleWithSymbolLExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprSimpleWithSymbolLExprRule()); }
	iv_ruleExprSimpleWithSymbolLExpr=ruleExprSimpleWithSymbolLExpr
	{ $current=$iv_ruleExprSimpleWithSymbolLExpr.current; }
	EOF;

// Rule ExprSimpleWithSymbolLExpr
ruleExprSimpleWithSymbolLExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='('
		{
			newLeafNode(otherlv_0, grammarAccess.getExprSimpleWithSymbolLExprAccess().getLeftParenthesisKeyword_0());
		}
		{
			newCompositeNode(grammarAccess.getExprSimpleWithSymbolLExprAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				lv_symbol_2_0=RULE_SYMBOL
				{
					newLeafNode(lv_symbol_2_0, grammarAccess.getExprSimpleWithSymbolLExprAccess().getSymbolSYMBOLTerminalRuleCall_2_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getExprSimpleWithSymbolLExprRule());
					}
					setWithLastConsumed(
						$current,
						"symbol",
						lv_symbol_2_0,
						"esir.comp.cpp.WhileDsl.SYMBOL");
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getExprSimpleWithSymbolLExprAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getExprSimpleWithSymbolLExprAccess().getLexprLExprParserRuleCall_4_0());
				}
				lv_lexpr_4_0=ruleLExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprSimpleWithSymbolLExprRule());
					}
					set(
						$current,
						"lexpr",
						lv_lexpr_4_0,
						"esir.comp.cpp.WhileDsl.LExpr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getExprSimpleWithSymbolLExprAccess().getLCParserRuleCall_5());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_6=')'
		{
			newLeafNode(otherlv_6, grammarAccess.getExprSimpleWithSymbolLExprAccess().getRightParenthesisKeyword_6());
		}
	)
;

// Entry rule entryRuleLExpr
entryRuleLExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getLExprRule()); }
	iv_ruleLExpr=ruleLExpr
	{ $current=$iv_ruleLExpr.current; }
	EOF;

// Rule LExpr
ruleLExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getLExprAccess().getExpressionsExprParserRuleCall_0_0());
				}
				lv_expressions_0_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getLExprRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_0_0,
						"esir.comp.cpp.WhileDsl.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getLExprAccess().getLCParserRuleCall_1_0());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getLExprAccess().getExpressionsExprParserRuleCall_1_1_0());
					}
					lv_expressions_2_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getLExprRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_2_0,
							"esir.comp.cpp.WhileDsl.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExprs
entryRuleExprs returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprsRule()); }
	iv_ruleExprs=ruleExprs
	{ $current=$iv_ruleExprs.current; }
	EOF;

// Rule Exprs
ruleExprs returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprsAccess().getExpressionsExprParserRuleCall_0_0());
				}
				lv_expressions_0_0=ruleExpr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprsRule());
					}
					add(
						$current,
						"expressions",
						lv_expressions_0_0,
						"esir.comp.cpp.WhileDsl.Expr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			otherlv_1=','
			{
				newLeafNode(otherlv_1, grammarAccess.getExprsAccess().getCommaKeyword_1_0());
			}
			{
				newCompositeNode(grammarAccess.getExprsAccess().getLCParserRuleCall_1_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExprsAccess().getExpressionsExprParserRuleCall_1_2_0());
					}
					lv_expressions_3_0=ruleExpr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprsRule());
						}
						add(
							$current,
							"expressions",
							lv_expressions_3_0,
							"esir.comp.cpp.WhileDsl.Expr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExpr
entryRuleExpr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprRule()); }
	iv_ruleExpr=ruleExpr
	{ $current=$iv_ruleExpr.current; }
	EOF;

// Rule Expr
ruleExpr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			((
				(
					ruleExprAnd
				)
			)
			)=>
			(
				(
					{
						newCompositeNode(grammarAccess.getExprAccess().getExpressionExprAndParserRuleCall_0_0_0());
					}
					lv_expression_0_0=ruleExprAnd
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprRule());
						}
						set(
							$current,
							"expression",
							lv_expression_0_0,
							"esir.comp.cpp.WhileDsl.ExprAnd");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		    |
		(
			(
				{
					newCompositeNode(grammarAccess.getExprAccess().getExpressionExprSimpleParserRuleCall_1_0());
				}
				lv_expression_1_0=ruleExprSimple
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprRule());
					}
					set(
						$current,
						"expression",
						lv_expression_1_0,
						"esir.comp.cpp.WhileDsl.ExprSimple");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExprAnd
entryRuleExprAnd returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprAndRule()); }
	iv_ruleExprAnd=ruleExprAnd
	{ $current=$iv_ruleExprAnd.current; }
	EOF;

// Rule ExprAnd
ruleExprAnd returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprAndAccess().getExpressionsOrExprOrParserRuleCall_0_0());
				}
				lv_expressionsOr_0_0=ruleExprOr
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprAndRule());
					}
					add(
						$current,
						"expressionsOr",
						lv_expressionsOr_0_0,
						"esir.comp.cpp.WhileDsl.ExprOr");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_0());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_2='and'
			{
				newLeafNode(otherlv_2, grammarAccess.getExprAndAccess().getAndKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getExprAndAccess().getLCParserRuleCall_1_2());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExprAndAccess().getExpressionsOrExprOrParserRuleCall_1_3_0());
					}
					lv_expressionsOr_4_0=ruleExprOr
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprAndRule());
						}
						add(
							$current,
							"expressionsOr",
							lv_expressionsOr_4_0,
							"esir.comp.cpp.WhileDsl.ExprOr");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExprOr
entryRuleExprOr returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprOrRule()); }
	iv_ruleExprOr=ruleExprOr
	{ $current=$iv_ruleExprOr.current; }
	EOF;

// Rule ExprOr
ruleExprOr returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprOrAccess().getExpressionsNotExprNotParserRuleCall_0_0());
				}
				lv_expressionsNot_0_0=ruleExprNot
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprOrRule());
					}
					add(
						$current,
						"expressionsNot",
						lv_expressionsNot_0_0,
						"esir.comp.cpp.WhileDsl.ExprNot");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			{
				newCompositeNode(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_0());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			otherlv_2='or'
			{
				newLeafNode(otherlv_2, grammarAccess.getExprOrAccess().getOrKeyword_1_1());
			}
			{
				newCompositeNode(grammarAccess.getExprOrAccess().getLCParserRuleCall_1_2());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
			(
				(
					{
						newCompositeNode(grammarAccess.getExprOrAccess().getExpressionsNotExprNotParserRuleCall_1_3_0());
					}
					lv_expressionsNot_4_0=ruleExprNot
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprOrRule());
						}
						add(
							$current,
							"expressionsNot",
							lv_expressionsNot_4_0,
							"esir.comp.cpp.WhileDsl.ExprNot");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleExprNot
entryRuleExprNot returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprNotRule()); }
	iv_ruleExprNot=ruleExprNot
	{ $current=$iv_ruleExprNot.current; }
	EOF;

// Rule ExprNot
ruleExprNot returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_negation_0_0='not'
					{
						newLeafNode(lv_negation_0_0, grammarAccess.getExprNotAccess().getNegationNotKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getExprNotRule());
						}
						setWithLastConsumed($current, "negation", true, "not");
					}
				)
			)
			{
				newCompositeNode(grammarAccess.getExprNotAccess().getLCParserRuleCall_0_1());
			}
			ruleLC
			{
				afterParserOrEnumRuleCall();
			}
		)?
		(
			(
				{
					newCompositeNode(grammarAccess.getExprNotAccess().getExpressionEqExprEqParserRuleCall_1_0());
				}
				lv_expressionEq_2_0=ruleExprEq
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprNotRule());
					}
					set(
						$current,
						"expressionEq",
						lv_expressionEq_2_0,
						"esir.comp.cpp.WhileDsl.ExprEq");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleExprEq
entryRuleExprEq returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getExprEqRule()); }
	iv_ruleExprEq=ruleExprEq
	{ $current=$iv_ruleExprEq.current; }
	EOF;

// Rule ExprEq
ruleExprEq returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getExprEqAccess().getExprLExprSimpleParserRuleCall_0_0());
				}
				lv_exprL_0_0=ruleExprSimple
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getExprEqRule());
					}
					set(
						$current,
						"exprL",
						lv_exprL_0_0,
						"esir.comp.cpp.WhileDsl.ExprSimple");
					afterParserOrEnumRuleCall();
				}
			)
		)
		{
			newCompositeNode(grammarAccess.getExprEqAccess().getLCParserRuleCall_1());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		otherlv_2='=?'
		{
			newLeafNode(otherlv_2, grammarAccess.getExprEqAccess().getEqualsSignQuestionMarkKeyword_2());
		}
		{
			newCompositeNode(grammarAccess.getExprEqAccess().getLCParserRuleCall_3());
		}
		ruleLC
		{
			afterParserOrEnumRuleCall();
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getExprEqAccess().getExprRSimpleExprSimpleParserRuleCall_4_0_0());
					}
					lv_exprRSimple_4_0=ruleExprSimple
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getExprEqRule());
						}
						set(
							$current,
							"exprRSimple",
							lv_exprRSimple_4_0,
							"esir.comp.cpp.WhileDsl.ExprSimple");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				otherlv_5='('
				{
					newLeafNode(otherlv_5, grammarAccess.getExprEqAccess().getLeftParenthesisKeyword_4_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getExprEqAccess().getExprRExprExprParserRuleCall_4_1_1_0());
						}
						lv_exprRExpr_6_0=ruleExpr
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getExprEqRule());
							}
							set(
								$current,
								"exprRExpr",
								lv_exprRExpr_6_0,
								"esir.comp.cpp.WhileDsl.Expr");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_7=')'
				{
					newLeafNode(otherlv_7, grammarAccess.getExprEqAccess().getRightParenthesisKeyword_4_1_2());
				}
			)
		)
	)
;

// Entry rule entryRuleLC
entryRuleLC returns [String current=null]:
	{ newCompositeNode(grammarAccess.getLCRule()); }
	iv_ruleLC=ruleLC
	{ $current=$iv_ruleLC.current.getText(); }
	EOF;

// Rule LC
ruleLC returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		this_SP_0=RULE_SP
		{
			$current.merge(this_SP_0);
		}
		{
			newLeafNode(this_SP_0, grammarAccess.getLCAccess().getSPTerminalRuleCall_0());
		}
		    |
		this_CR_1=RULE_CR
		{
			$current.merge(this_CR_1);
		}
		{
			newLeafNode(this_CR_1, grammarAccess.getLCAccess().getCRTerminalRuleCall_1());
		}
		    |
		this_TAB_2=RULE_TAB
		{
			$current.merge(this_TAB_2);
		}
		{
			newLeafNode(this_TAB_2, grammarAccess.getLCAccess().getTABTerminalRuleCall_2());
		}
		    |
		this_LF_3=RULE_LF
		{
			$current.merge(this_LF_3);
		}
		{
			newLeafNode(this_LF_3, grammarAccess.getLCAccess().getLFTerminalRuleCall_3());
		}
	)*
;

RULE_VARIABLE : 'A'..'Z' ('0'..'9'|'a'..'z'|'A'..'Z')* (('-'|'+'|'.'|'/'|'_'|'&'|'->') ('0'..'9'|'a'..'z'|'A'..'Z')?)* ('?'|'!')?;

RULE_SYMBOL : 'a'..'z' ('0'..'9'|'a'..'z'|'A'..'Z')* (('-'|'+'|'.'|'/'|'_'|'&'|'->') ('0'..'9'|'a'..'z'|'A'..'Z')?)* ('?'|'!')?;

RULE_SP : ' ';

RULE_CR : '\n';

RULE_TAB : '\t';

RULE_LF : '\r';

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
