/*
 * generated by Xtext 2.19.0
 */
package esir.comp.cpp.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class WhileDslGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Model");
		private final Assignment cProgramAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cProgramFunctionParserRuleCall_0 = (RuleCall)cProgramAssignment.eContents().get(0);
		
		//Model:
		//	program+=Function*;
		@Override public ParserRule getRule() { return rule; }
		
		//program+=Function*
		public Assignment getProgramAssignment() { return cProgramAssignment; }
		
		//Function
		public RuleCall getProgramFunctionParserRuleCall_0() { return cProgramFunctionParserRuleCall_0; }
	}
	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFunctionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cSYMBOLTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final Keyword cColonKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final RuleCall cLCParserRuleCall_4 = (RuleCall)cGroup.eContents().get(4);
		private final RuleCall cDefinitionParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cLCParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		
		//// Structure de base
		//Function:
		//	'function' LC SYMBOL ':' LC Definition LC;
		@Override public ParserRule getRule() { return rule; }
		
		//'function' LC SYMBOL ':' LC Definition LC
		public Group getGroup() { return cGroup; }
		
		//'function'
		public Keyword getFunctionKeyword_0() { return cFunctionKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_2() { return cSYMBOLTerminalRuleCall_2; }
		
		//':'
		public Keyword getColonKeyword_3() { return cColonKeyword_3; }
		
		//LC
		public RuleCall getLCParserRuleCall_4() { return cLCParserRuleCall_4; }
		
		//Definition
		public RuleCall getDefinitionParserRuleCall_5() { return cDefinitionParserRuleCall_5; }
		
		//LC
		public RuleCall getLCParserRuleCall_6() { return cLCParserRuleCall_6; }
	}
	public class DefinitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Definition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cReadKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cInputParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cPercentSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cPercentSignKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final Keyword cWriteKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final RuleCall cLCParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final RuleCall cOutputParserRuleCall_12 = (RuleCall)cGroup.eContents().get(12);
		
		//Definition:
		//	'read' LC Input LC '%' LC Commands LC '%' LC 'write' LC Output;
		@Override public ParserRule getRule() { return rule; }
		
		//'read' LC Input LC '%' LC Commands LC '%' LC 'write' LC Output
		public Group getGroup() { return cGroup; }
		
		//'read'
		public Keyword getReadKeyword_0() { return cReadKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//Input
		public RuleCall getInputParserRuleCall_2() { return cInputParserRuleCall_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'%'
		public Keyword getPercentSignKeyword_4() { return cPercentSignKeyword_4; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_6() { return cCommandsParserRuleCall_6; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//'%'
		public Keyword getPercentSignKeyword_8() { return cPercentSignKeyword_8; }
		
		//LC
		public RuleCall getLCParserRuleCall_9() { return cLCParserRuleCall_9; }
		
		//'write'
		public Keyword getWriteKeyword_10() { return cWriteKeyword_10; }
		
		//LC
		public RuleCall getLCParserRuleCall_11() { return cLCParserRuleCall_11; }
		
		//Output
		public RuleCall getOutputParserRuleCall_12() { return cOutputParserRuleCall_12; }
	}
	public class InputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Input");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Input:
		//	VARIABLE (',' VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//VARIABLE (',' VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0() { return cVARIABLETerminalRuleCall_0; }
		
		//(',' VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_1() { return cVARIABLETerminalRuleCall_1_1; }
	}
	public class OutputElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Output");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Output:
		//	VARIABLE (',' VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//VARIABLE (',' VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0() { return cVARIABLETerminalRuleCall_0; }
		
		//(',' VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_1() { return cVARIABLETerminalRuleCall_1_1; }
	}
	public class CommandsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Commands");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cCommandParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cSemicolonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cCommandParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cSemicolonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//// Commandes
		//Commands:
		//	Command (';' Command)* ';'?;
		@Override public ParserRule getRule() { return rule; }
		
		//Command (';' Command)* ';'?
		public Group getGroup() { return cGroup; }
		
		//Command
		public RuleCall getCommandParserRuleCall_0() { return cCommandParserRuleCall_0; }
		
		//(';' Command)*
		public Group getGroup_1() { return cGroup_1; }
		
		//';'
		public Keyword getSemicolonKeyword_1_0() { return cSemicolonKeyword_1_0; }
		
		//Command
		public RuleCall getCommandParserRuleCall_1_1() { return cCommandParserRuleCall_1_1; }
		
		//';'?
		public Keyword getSemicolonKeyword_2() { return cSemicolonKeyword_2; }
	}
	public class CommandElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Command");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNopKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cWhileParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cIfParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cForeachParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final RuleCall cVarsParserRuleCall_5_0 = (RuleCall)cGroup_5.eContents().get(0);
		private final RuleCall cLCParserRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final Keyword cColonEqualsSignKeyword_5_2 = (Keyword)cGroup_5.eContents().get(2);
		private final RuleCall cLCParserRuleCall_5_3 = (RuleCall)cGroup_5.eContents().get(3);
		private final RuleCall cExprsParserRuleCall_5_4 = (RuleCall)cGroup_5.eContents().get(4);
		
		//Command:
		//	'nop' | While | For | If | Foreach | Vars LC ':=' LC Exprs;
		@Override public ParserRule getRule() { return rule; }
		
		//'nop' | While | For | If | Foreach | Vars LC ':=' LC Exprs
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'nop'
		public Keyword getNopKeyword_0() { return cNopKeyword_0; }
		
		//While
		public RuleCall getWhileParserRuleCall_1() { return cWhileParserRuleCall_1; }
		
		//For
		public RuleCall getForParserRuleCall_2() { return cForParserRuleCall_2; }
		
		//If
		public RuleCall getIfParserRuleCall_3() { return cIfParserRuleCall_3; }
		
		//Foreach
		public RuleCall getForeachParserRuleCall_4() { return cForeachParserRuleCall_4; }
		
		//Vars LC ':=' LC Exprs
		public Group getGroup_5() { return cGroup_5; }
		
		//Vars
		public RuleCall getVarsParserRuleCall_5_0() { return cVarsParserRuleCall_5_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_5_1() { return cLCParserRuleCall_5_1; }
		
		//':='
		public Keyword getColonEqualsSignKeyword_5_2() { return cColonEqualsSignKeyword_5_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_5_3() { return cLCParserRuleCall_5_3; }
		
		//Exprs
		public RuleCall getExprsParserRuleCall_5_4() { return cExprsParserRuleCall_5_4; }
	}
	public class WhileElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.While");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cWhileKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cOdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//While:
		//	'while' LC Expr LC 'do' LC Commands LC 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'while' LC Expr LC 'do' LC Commands LC 'od'
		public Group getGroup() { return cGroup; }
		
		//'while'
		public Keyword getWhileKeyword_0() { return cWhileKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_6() { return cCommandsParserRuleCall_6; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//'od'
		public Keyword getOdKeyword_8() { return cOdKeyword_8; }
	}
	public class ForElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.For");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cDoKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cOdKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//For:
		//	'for' LC Expr LC 'do' LC Commands LC 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'for' LC Expr LC 'do' LC Commands LC 'od'
		public Group getGroup() { return cGroup; }
		
		//'for'
		public Keyword getForKeyword_0() { return cForKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'do'
		public Keyword getDoKeyword_4() { return cDoKeyword_4; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_6() { return cCommandsParserRuleCall_6; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//'od'
		public Keyword getOdKeyword_8() { return cOdKeyword_8; }
	}
	public class IfElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.If");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cThenKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cCommandsParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Alternatives cAlternatives_8 = (Alternatives)cGroup.eContents().get(8);
		private final Group cGroup_8_0 = (Group)cAlternatives_8.eContents().get(0);
		private final Keyword cElseKeyword_8_0_0 = (Keyword)cGroup_8_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_8_0_1 = (RuleCall)cGroup_8_0.eContents().get(1);
		private final RuleCall cCommandsParserRuleCall_8_0_2 = (RuleCall)cGroup_8_0.eContents().get(2);
		private final RuleCall cLCParserRuleCall_8_0_3 = (RuleCall)cGroup_8_0.eContents().get(3);
		private final Keyword cFiKeyword_8_0_4 = (Keyword)cGroup_8_0.eContents().get(4);
		private final Keyword cFiKeyword_8_1 = (Keyword)cAlternatives_8.eContents().get(1);
		
		//If:
		//	'if' LC Expr LC 'then' LC Commands LC ('else' LC Commands LC 'fi' | 'fi');
		@Override public ParserRule getRule() { return rule; }
		
		//'if' LC Expr LC 'then' LC Commands LC ('else' LC Commands LC 'fi' | 'fi')
		public Group getGroup() { return cGroup; }
		
		//'if'
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'then'
		public Keyword getThenKeyword_4() { return cThenKeyword_4; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_6() { return cCommandsParserRuleCall_6; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//('else' LC Commands LC 'fi' | 'fi')
		public Alternatives getAlternatives_8() { return cAlternatives_8; }
		
		//'else' LC Commands LC 'fi'
		public Group getGroup_8_0() { return cGroup_8_0; }
		
		//'else'
		public Keyword getElseKeyword_8_0_0() { return cElseKeyword_8_0_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_8_0_1() { return cLCParserRuleCall_8_0_1; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_8_0_2() { return cCommandsParserRuleCall_8_0_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_8_0_3() { return cLCParserRuleCall_8_0_3; }
		
		//'fi'
		public Keyword getFiKeyword_8_0_4() { return cFiKeyword_8_0_4; }
		
		//'fi'
		public Keyword getFiKeyword_8_1() { return cFiKeyword_8_1; }
	}
	public class ForeachElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Foreach");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cForeachKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1 = (RuleCall)cGroup.eContents().get(1);
		private final RuleCall cExprParserRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		private final RuleCall cLCParserRuleCall_3 = (RuleCall)cGroup.eContents().get(3);
		private final Keyword cInKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final RuleCall cLCParserRuleCall_5 = (RuleCall)cGroup.eContents().get(5);
		private final RuleCall cExprParserRuleCall_6 = (RuleCall)cGroup.eContents().get(6);
		private final RuleCall cLCParserRuleCall_7 = (RuleCall)cGroup.eContents().get(7);
		private final Keyword cDoKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final RuleCall cLCParserRuleCall_9 = (RuleCall)cGroup.eContents().get(9);
		private final RuleCall cCommandsParserRuleCall_10 = (RuleCall)cGroup.eContents().get(10);
		private final RuleCall cLCParserRuleCall_11 = (RuleCall)cGroup.eContents().get(11);
		private final Keyword cOdKeyword_12 = (Keyword)cGroup.eContents().get(12);
		
		//Foreach:
		//	'foreach' LC Expr LC 'in' LC Expr LC 'do' LC Commands LC 'od';
		@Override public ParserRule getRule() { return rule; }
		
		//'foreach' LC Expr LC 'in' LC Expr LC 'do' LC Commands LC 'od'
		public Group getGroup() { return cGroup; }
		
		//'foreach'
		public Keyword getForeachKeyword_0() { return cForeachKeyword_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1() { return cLCParserRuleCall_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_2() { return cExprParserRuleCall_2; }
		
		//LC
		public RuleCall getLCParserRuleCall_3() { return cLCParserRuleCall_3; }
		
		//'in'
		public Keyword getInKeyword_4() { return cInKeyword_4; }
		
		//LC
		public RuleCall getLCParserRuleCall_5() { return cLCParserRuleCall_5; }
		
		//Expr
		public RuleCall getExprParserRuleCall_6() { return cExprParserRuleCall_6; }
		
		//LC
		public RuleCall getLCParserRuleCall_7() { return cLCParserRuleCall_7; }
		
		//'do'
		public Keyword getDoKeyword_8() { return cDoKeyword_8; }
		
		//LC
		public RuleCall getLCParserRuleCall_9() { return cLCParserRuleCall_9; }
		
		//Commands
		public RuleCall getCommandsParserRuleCall_10() { return cCommandsParserRuleCall_10; }
		
		//LC
		public RuleCall getLCParserRuleCall_11() { return cLCParserRuleCall_11; }
		
		//'od'
		public Keyword getOdKeyword_12() { return cOdKeyword_12; }
	}
	public class VarsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Vars");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cVARIABLETerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//Vars:
		//	VARIABLE (',' VARIABLE)*;
		@Override public ParserRule getRule() { return rule; }
		
		//VARIABLE (',' VARIABLE)*
		public Group getGroup() { return cGroup; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_0() { return cVARIABLETerminalRuleCall_0; }
		
		//(',' VARIABLE)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1_1() { return cVARIABLETerminalRuleCall_1_1; }
	}
	public class ExprSimpleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.ExprSimple");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cNilKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final RuleCall cVARIABLETerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSYMBOLTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final Group cGroup_3 = (Group)cAlternatives.eContents().get(3);
		private final Keyword cLeftParenthesisKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Alternatives cAlternatives_3_1 = (Alternatives)cGroup_3.eContents().get(1);
		private final Keyword cConsKeyword_3_1_0 = (Keyword)cAlternatives_3_1.eContents().get(0);
		private final Keyword cListKeyword_3_1_1 = (Keyword)cAlternatives_3_1.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_3_2 = (RuleCall)cGroup_3.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_3_3 = (Keyword)cGroup_3.eContents().get(3);
		private final Group cGroup_4 = (Group)cAlternatives.eContents().get(4);
		private final Keyword cLeftParenthesisKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Alternatives cAlternatives_4_1 = (Alternatives)cGroup_4.eContents().get(1);
		private final Keyword cHdKeyword_4_1_0 = (Keyword)cAlternatives_4_1.eContents().get(0);
		private final Keyword cTlKeyword_4_1_1 = (Keyword)cAlternatives_4_1.eContents().get(1);
		private final RuleCall cLCParserRuleCall_4_2 = (RuleCall)cGroup_4.eContents().get(2);
		private final RuleCall cExprParserRuleCall_4_3 = (RuleCall)cGroup_4.eContents().get(3);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		private final Group cGroup_5 = (Group)cAlternatives.eContents().get(5);
		private final Keyword cLeftParenthesisKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final RuleCall cSYMBOLTerminalRuleCall_5_1 = (RuleCall)cGroup_5.eContents().get(1);
		private final RuleCall cLExprParserRuleCall_5_2 = (RuleCall)cGroup_5.eContents().get(2);
		private final Keyword cRightParenthesisKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//// Expressions
		//ExprSimple:
		//	'nil' | VARIABLE | SYMBOL | '(' ('cons' | 'list') LExpr ')' | '(' ('hd' | 'tl') LC Expr ')' | '(' SYMBOL LExpr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'nil' | VARIABLE | SYMBOL | '(' ('cons' | 'list') LExpr ')' | '(' ('hd' | 'tl') LC Expr ')' | '(' SYMBOL LExpr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'nil'
		public Keyword getNilKeyword_0() { return cNilKeyword_0; }
		
		//VARIABLE
		public RuleCall getVARIABLETerminalRuleCall_1() { return cVARIABLETerminalRuleCall_1; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_2() { return cSYMBOLTerminalRuleCall_2; }
		
		//'(' ('cons' | 'list') LExpr ')'
		public Group getGroup_3() { return cGroup_3; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_3_0() { return cLeftParenthesisKeyword_3_0; }
		
		//('cons' | 'list')
		public Alternatives getAlternatives_3_1() { return cAlternatives_3_1; }
		
		//'cons'
		public Keyword getConsKeyword_3_1_0() { return cConsKeyword_3_1_0; }
		
		//'list'
		public Keyword getListKeyword_3_1_1() { return cListKeyword_3_1_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_3_2() { return cLExprParserRuleCall_3_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3_3() { return cRightParenthesisKeyword_3_3; }
		
		//'(' ('hd' | 'tl') LC Expr ')'
		public Group getGroup_4() { return cGroup_4; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_4_0() { return cLeftParenthesisKeyword_4_0; }
		
		//('hd' | 'tl')
		public Alternatives getAlternatives_4_1() { return cAlternatives_4_1; }
		
		//'hd'
		public Keyword getHdKeyword_4_1_0() { return cHdKeyword_4_1_0; }
		
		//'tl'
		public Keyword getTlKeyword_4_1_1() { return cTlKeyword_4_1_1; }
		
		//LC
		public RuleCall getLCParserRuleCall_4_2() { return cLCParserRuleCall_4_2; }
		
		//Expr
		public RuleCall getExprParserRuleCall_4_3() { return cExprParserRuleCall_4_3; }
		
		//')'
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
		
		//'(' SYMBOL LExpr ')'
		public Group getGroup_5() { return cGroup_5; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_5_0() { return cLeftParenthesisKeyword_5_0; }
		
		//SYMBOL
		public RuleCall getSYMBOLTerminalRuleCall_5_1() { return cSYMBOLTerminalRuleCall_5_1; }
		
		//LExpr
		public RuleCall getLExprParserRuleCall_5_2() { return cLExprParserRuleCall_5_2; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5_3() { return cRightParenthesisKeyword_5_3; }
	}
	public class LExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.LExpr");
		private final RuleCall cExprParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//LExpr:
		//	Expr+;
		@Override public ParserRule getRule() { return rule; }
		
		//Expr+
		public RuleCall getExprParserRuleCall() { return cExprParserRuleCall; }
	}
	public class ExprsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Exprs");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cLCParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final RuleCall cExprParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		
		//Exprs:
		//	Expr (',' LC Expr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//Expr (',' LC Expr)*
		public Group getGroup() { return cGroup; }
		
		//Expr
		public RuleCall getExprParserRuleCall_0() { return cExprParserRuleCall_0; }
		
		//(',' LC Expr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//','
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_1() { return cLCParserRuleCall_1_1; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1_2() { return cExprParserRuleCall_1_2; }
	}
	public class ExprElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.Expr");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cExprAndParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExprSimpleParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Expr:
		//	=> ExprAnd | ExprSimple;
		@Override public ParserRule getRule() { return rule; }
		
		//=> ExprAnd | ExprSimple
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//=> ExprAnd
		public RuleCall getExprAndParserRuleCall_0() { return cExprAndParserRuleCall_0; }
		
		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_1() { return cExprSimpleParserRuleCall_1; }
	}
	public class ExprAndElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.ExprAnd");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprOrParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cAndKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cExprOrParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//ExprAnd:
		//	ExprOr (LC 'and' LC ExprOr)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprOr (LC 'and' LC ExprOr)*
		public Group getGroup() { return cGroup; }
		
		//ExprOr
		public RuleCall getExprOrParserRuleCall_0() { return cExprOrParserRuleCall_0; }
		
		//(LC 'and' LC ExprOr)*
		public Group getGroup_1() { return cGroup_1; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_0() { return cLCParserRuleCall_1_0; }
		
		//'and'
		public Keyword getAndKeyword_1_1() { return cAndKeyword_1_1; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_2() { return cLCParserRuleCall_1_2; }
		
		//ExprOr
		public RuleCall getExprOrParserRuleCall_1_3() { return cExprOrParserRuleCall_1_3; }
	}
	public class ExprOrElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.ExprOr");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cExprNotParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cOrKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final RuleCall cLCParserRuleCall_1_2 = (RuleCall)cGroup_1.eContents().get(2);
		private final RuleCall cExprNotParserRuleCall_1_3 = (RuleCall)cGroup_1.eContents().get(3);
		
		//ExprOr:
		//	ExprNot (LC 'or' LC ExprNot)*;
		@Override public ParserRule getRule() { return rule; }
		
		//ExprNot (LC 'or' LC ExprNot)*
		public Group getGroup() { return cGroup; }
		
		//ExprNot
		public RuleCall getExprNotParserRuleCall_0() { return cExprNotParserRuleCall_0; }
		
		//(LC 'or' LC ExprNot)*
		public Group getGroup_1() { return cGroup_1; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_0() { return cLCParserRuleCall_1_0; }
		
		//'or'
		public Keyword getOrKeyword_1_1() { return cOrKeyword_1_1; }
		
		//LC
		public RuleCall getLCParserRuleCall_1_2() { return cLCParserRuleCall_1_2; }
		
		//ExprNot
		public RuleCall getExprNotParserRuleCall_1_3() { return cExprNotParserRuleCall_1_3; }
	}
	public class ExprNotElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.ExprNot");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cNotKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final RuleCall cLCParserRuleCall_0_1 = (RuleCall)cGroup_0.eContents().get(1);
		private final RuleCall cExprEqParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final RuleCall cExprEqParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//ExprNot:
		//	'not' LC ExprEq | ExprEq;
		@Override public ParserRule getRule() { return rule; }
		
		//'not' LC ExprEq | ExprEq
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'not' LC ExprEq
		public Group getGroup_0() { return cGroup_0; }
		
		//'not'
		public Keyword getNotKeyword_0_0() { return cNotKeyword_0_0; }
		
		//LC
		public RuleCall getLCParserRuleCall_0_1() { return cLCParserRuleCall_0_1; }
		
		//ExprEq
		public RuleCall getExprEqParserRuleCall_0_2() { return cExprEqParserRuleCall_0_2; }
		
		//ExprEq
		public RuleCall getExprEqParserRuleCall_1() { return cExprEqParserRuleCall_1; }
	}
	public class ExprEqElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.ExprEq");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final RuleCall cExprSimpleParserRuleCall_0_0 = (RuleCall)cGroup_0.eContents().get(0);
		private final Keyword cEqualsSignQuestionMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final RuleCall cExprSimpleParserRuleCall_0_2 = (RuleCall)cGroup_0.eContents().get(2);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cExprParserRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//ExprEq:
		//	ExprSimple '=?' ExprSimple | '(' Expr ')';
		@Override public ParserRule getRule() { return rule; }
		
		//ExprSimple '=?' ExprSimple | '(' Expr ')'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//ExprSimple '=?' ExprSimple
		public Group getGroup_0() { return cGroup_0; }
		
		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0_0() { return cExprSimpleParserRuleCall_0_0; }
		
		//'=?'
		public Keyword getEqualsSignQuestionMarkKeyword_0_1() { return cEqualsSignQuestionMarkKeyword_0_1; }
		
		//ExprSimple
		public RuleCall getExprSimpleParserRuleCall_0_2() { return cExprSimpleParserRuleCall_0_2; }
		
		//'(' Expr ')'
		public Group getGroup_1() { return cGroup_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1_0() { return cLeftParenthesisKeyword_1_0; }
		
		//Expr
		public RuleCall getExprParserRuleCall_1_1() { return cExprParserRuleCall_1_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_1_2() { return cRightParenthesisKeyword_1_2; }
	}
	public class LCElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.LC");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSPTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCRTerminalRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTABTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cLFTerminalRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// Separateur entre symbole non terminaux
		//LC:
		//	(SP | CR | TAB | LF)*;
		@Override public ParserRule getRule() { return rule; }
		
		//(SP | CR | TAB | LF)*
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SP
		public RuleCall getSPTerminalRuleCall_0() { return cSPTerminalRuleCall_0; }
		
		//CR
		public RuleCall getCRTerminalRuleCall_1() { return cCRTerminalRuleCall_1; }
		
		//TAB
		public RuleCall getTABTerminalRuleCall_2() { return cTABTerminalRuleCall_2; }
		
		//LF
		public RuleCall getLFTerminalRuleCall_3() { return cLFTerminalRuleCall_3; }
	}
	
	
	private final ModelElements pModel;
	private final FunctionElements pFunction;
	private final DefinitionElements pDefinition;
	private final InputElements pInput;
	private final OutputElements pOutput;
	private final CommandsElements pCommands;
	private final CommandElements pCommand;
	private final WhileElements pWhile;
	private final ForElements pFor;
	private final IfElements pIf;
	private final ForeachElements pForeach;
	private final VarsElements pVars;
	private final ExprSimpleElements pExprSimple;
	private final LExprElements pLExpr;
	private final ExprsElements pExprs;
	private final ExprElements pExpr;
	private final ExprAndElements pExprAnd;
	private final ExprOrElements pExprOr;
	private final ExprNotElements pExprNot;
	private final ExprEqElements pExprEq;
	private final LCElements pLC;
	private final TerminalRule tVARIABLE;
	private final TerminalRule tSYMBOL;
	private final TerminalRule tSP;
	private final TerminalRule tCR;
	private final TerminalRule tTAB;
	private final TerminalRule tLF;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public WhileDslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pFunction = new FunctionElements();
		this.pDefinition = new DefinitionElements();
		this.pInput = new InputElements();
		this.pOutput = new OutputElements();
		this.pCommands = new CommandsElements();
		this.pCommand = new CommandElements();
		this.pWhile = new WhileElements();
		this.pFor = new ForElements();
		this.pIf = new IfElements();
		this.pForeach = new ForeachElements();
		this.pVars = new VarsElements();
		this.pExprSimple = new ExprSimpleElements();
		this.pLExpr = new LExprElements();
		this.pExprs = new ExprsElements();
		this.pExpr = new ExprElements();
		this.pExprAnd = new ExprAndElements();
		this.pExprOr = new ExprOrElements();
		this.pExprNot = new ExprNotElements();
		this.pExprEq = new ExprEqElements();
		this.pLC = new LCElements();
		this.tVARIABLE = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.VARIABLE");
		this.tSYMBOL = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.SYMBOL");
		this.tSP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.SP");
		this.tCR = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.CR");
		this.tTAB = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.TAB");
		this.tLF = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "esir.comp.cpp.WhileDsl.LF");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("esir.comp.cpp.WhileDsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	program+=Function*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//// Structure de base
	//Function:
	//	'function' LC SYMBOL ':' LC Definition LC;
	public FunctionElements getFunctionAccess() {
		return pFunction;
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}
	
	//Definition:
	//	'read' LC Input LC '%' LC Commands LC '%' LC 'write' LC Output;
	public DefinitionElements getDefinitionAccess() {
		return pDefinition;
	}
	
	public ParserRule getDefinitionRule() {
		return getDefinitionAccess().getRule();
	}
	
	//Input:
	//	VARIABLE (',' VARIABLE)*;
	public InputElements getInputAccess() {
		return pInput;
	}
	
	public ParserRule getInputRule() {
		return getInputAccess().getRule();
	}
	
	//Output:
	//	VARIABLE (',' VARIABLE)*;
	public OutputElements getOutputAccess() {
		return pOutput;
	}
	
	public ParserRule getOutputRule() {
		return getOutputAccess().getRule();
	}
	
	//// Commandes
	//Commands:
	//	Command (';' Command)* ';'?;
	public CommandsElements getCommandsAccess() {
		return pCommands;
	}
	
	public ParserRule getCommandsRule() {
		return getCommandsAccess().getRule();
	}
	
	//Command:
	//	'nop' | While | For | If | Foreach | Vars LC ':=' LC Exprs;
	public CommandElements getCommandAccess() {
		return pCommand;
	}
	
	public ParserRule getCommandRule() {
		return getCommandAccess().getRule();
	}
	
	//While:
	//	'while' LC Expr LC 'do' LC Commands LC 'od';
	public WhileElements getWhileAccess() {
		return pWhile;
	}
	
	public ParserRule getWhileRule() {
		return getWhileAccess().getRule();
	}
	
	//For:
	//	'for' LC Expr LC 'do' LC Commands LC 'od';
	public ForElements getForAccess() {
		return pFor;
	}
	
	public ParserRule getForRule() {
		return getForAccess().getRule();
	}
	
	//If:
	//	'if' LC Expr LC 'then' LC Commands LC ('else' LC Commands LC 'fi' | 'fi');
	public IfElements getIfAccess() {
		return pIf;
	}
	
	public ParserRule getIfRule() {
		return getIfAccess().getRule();
	}
	
	//Foreach:
	//	'foreach' LC Expr LC 'in' LC Expr LC 'do' LC Commands LC 'od';
	public ForeachElements getForeachAccess() {
		return pForeach;
	}
	
	public ParserRule getForeachRule() {
		return getForeachAccess().getRule();
	}
	
	//Vars:
	//	VARIABLE (',' VARIABLE)*;
	public VarsElements getVarsAccess() {
		return pVars;
	}
	
	public ParserRule getVarsRule() {
		return getVarsAccess().getRule();
	}
	
	//// Expressions
	//ExprSimple:
	//	'nil' | VARIABLE | SYMBOL | '(' ('cons' | 'list') LExpr ')' | '(' ('hd' | 'tl') LC Expr ')' | '(' SYMBOL LExpr ')';
	public ExprSimpleElements getExprSimpleAccess() {
		return pExprSimple;
	}
	
	public ParserRule getExprSimpleRule() {
		return getExprSimpleAccess().getRule();
	}
	
	//LExpr:
	//	Expr+;
	public LExprElements getLExprAccess() {
		return pLExpr;
	}
	
	public ParserRule getLExprRule() {
		return getLExprAccess().getRule();
	}
	
	//Exprs:
	//	Expr (',' LC Expr)*;
	public ExprsElements getExprsAccess() {
		return pExprs;
	}
	
	public ParserRule getExprsRule() {
		return getExprsAccess().getRule();
	}
	
	//Expr:
	//	=> ExprAnd | ExprSimple;
	public ExprElements getExprAccess() {
		return pExpr;
	}
	
	public ParserRule getExprRule() {
		return getExprAccess().getRule();
	}
	
	//ExprAnd:
	//	ExprOr (LC 'and' LC ExprOr)*;
	public ExprAndElements getExprAndAccess() {
		return pExprAnd;
	}
	
	public ParserRule getExprAndRule() {
		return getExprAndAccess().getRule();
	}
	
	//ExprOr:
	//	ExprNot (LC 'or' LC ExprNot)*;
	public ExprOrElements getExprOrAccess() {
		return pExprOr;
	}
	
	public ParserRule getExprOrRule() {
		return getExprOrAccess().getRule();
	}
	
	//ExprNot:
	//	'not' LC ExprEq | ExprEq;
	public ExprNotElements getExprNotAccess() {
		return pExprNot;
	}
	
	public ParserRule getExprNotRule() {
		return getExprNotAccess().getRule();
	}
	
	//ExprEq:
	//	ExprSimple '=?' ExprSimple | '(' Expr ')';
	public ExprEqElements getExprEqAccess() {
		return pExprEq;
	}
	
	public ParserRule getExprEqRule() {
		return getExprEqAccess().getRule();
	}
	
	//// Separateur entre symbole non terminaux
	//LC:
	//	(SP | CR | TAB | LF)*;
	public LCElements getLCAccess() {
		return pLC;
	}
	
	public ParserRule getLCRule() {
		return getLCAccess().getRule();
	}
	
	//terminal VARIABLE:
	//	"A".."Z" ("0".."9" | "a".."z" | "A".."Z")* ("?" | "!")?;
	public TerminalRule getVARIABLERule() {
		return tVARIABLE;
	}
	
	//terminal SYMBOL:
	//	"a".."z" ("0".."9" | "a".."z" | "A".."Z")* ("?" | "!")?;
	public TerminalRule getSYMBOLRule() {
		return tSYMBOL;
	}
	
	//terminal SP:
	//	' ';
	public TerminalRule getSPRule() {
		return tSP;
	}
	
	//terminal CR:
	//	'\n';
	public TerminalRule getCRRule() {
		return tCR;
	}
	
	//terminal TAB:
	//	'\t';
	public TerminalRule getTABRule() {
		return tTAB;
	}
	
	//terminal LF:
	//	'\r';
	public TerminalRule getLFRule() {
		return tLF;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' |
	//	"'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
