/**
 * generated by Xtext 2.19.0
 */
package esir.comp.cpp.whileDsl.impl;

import esir.comp.cpp.whileDsl.ExprEq;
import esir.comp.cpp.whileDsl.ExprNot;
import esir.comp.cpp.whileDsl.WhileDslPackage;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Expr Not</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link esir.comp.cpp.whileDsl.impl.ExprNotImpl#isNegation <em>Negation</em>}</li>
 *   <li>{@link esir.comp.cpp.whileDsl.impl.ExprNotImpl#getExpressionEq <em>Expression Eq</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ExprNotImpl extends MinimalEObjectImpl.Container implements ExprNot
{
  /**
   * The default value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected static final boolean NEGATION_EDEFAULT = false;

  /**
   * The cached value of the '{@link #isNegation() <em>Negation</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #isNegation()
   * @generated
   * @ordered
   */
  protected boolean negation = NEGATION_EDEFAULT;

  /**
   * The cached value of the '{@link #getExpressionEq() <em>Expression Eq</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getExpressionEq()
   * @generated
   * @ordered
   */
  protected ExprEq expressionEq;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ExprNotImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return WhileDslPackage.Literals.EXPR_NOT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean isNegation()
  {
    return negation;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setNegation(boolean newNegation)
  {
    boolean oldNegation = negation;
    negation = newNegation;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileDslPackage.EXPR_NOT__NEGATION, oldNegation, negation));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprEq getExpressionEq()
  {
    return expressionEq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetExpressionEq(ExprEq newExpressionEq, NotificationChain msgs)
  {
    ExprEq oldExpressionEq = expressionEq;
    expressionEq = newExpressionEq;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, WhileDslPackage.EXPR_NOT__EXPRESSION_EQ, oldExpressionEq, newExpressionEq);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setExpressionEq(ExprEq newExpressionEq)
  {
    if (newExpressionEq != expressionEq)
    {
      NotificationChain msgs = null;
      if (expressionEq != null)
        msgs = ((InternalEObject)expressionEq).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - WhileDslPackage.EXPR_NOT__EXPRESSION_EQ, null, msgs);
      if (newExpressionEq != null)
        msgs = ((InternalEObject)newExpressionEq).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - WhileDslPackage.EXPR_NOT__EXPRESSION_EQ, null, msgs);
      msgs = basicSetExpressionEq(newExpressionEq, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, WhileDslPackage.EXPR_NOT__EXPRESSION_EQ, newExpressionEq, newExpressionEq));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case WhileDslPackage.EXPR_NOT__EXPRESSION_EQ:
        return basicSetExpressionEq(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case WhileDslPackage.EXPR_NOT__NEGATION:
        return isNegation();
      case WhileDslPackage.EXPR_NOT__EXPRESSION_EQ:
        return getExpressionEq();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case WhileDslPackage.EXPR_NOT__NEGATION:
        setNegation((Boolean)newValue);
        return;
      case WhileDslPackage.EXPR_NOT__EXPRESSION_EQ:
        setExpressionEq((ExprEq)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case WhileDslPackage.EXPR_NOT__NEGATION:
        setNegation(NEGATION_EDEFAULT);
        return;
      case WhileDslPackage.EXPR_NOT__EXPRESSION_EQ:
        setExpressionEq((ExprEq)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case WhileDslPackage.EXPR_NOT__NEGATION:
        return negation != NEGATION_EDEFAULT;
      case WhileDslPackage.EXPR_NOT__EXPRESSION_EQ:
        return expressionEq != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (negation: ");
    result.append(negation);
    result.append(')');
    return result.toString();
  }

} //ExprNotImpl
