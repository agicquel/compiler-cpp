/**
 * generated by Xtext 2.19.0
 */
package esir.comp.cpp.whileDsl.impl;

import esir.comp.cpp.whileDsl.*;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class WhileDslFactoryImpl extends EFactoryImpl implements WhileDslFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static WhileDslFactory init()
  {
    try
    {
      WhileDslFactory theWhileDslFactory = (WhileDslFactory)EPackage.Registry.INSTANCE.getEFactory(WhileDslPackage.eNS_URI);
      if (theWhileDslFactory != null)
      {
        return theWhileDslFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new WhileDslFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public WhileDslFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case WhileDslPackage.MODEL: return createModel();
      case WhileDslPackage.FUNCTION: return createFunction();
      case WhileDslPackage.DEFINITION: return createDefinition();
      case WhileDslPackage.INPUT: return createInput();
      case WhileDslPackage.OUTPUT: return createOutput();
      case WhileDslPackage.COMMANDS: return createCommands();
      case WhileDslPackage.COMMAND: return createCommand();
      case WhileDslPackage.WHILE_COMMAND: return createWhileCommand();
      case WhileDslPackage.FOR_COMMAND: return createForCommand();
      case WhileDslPackage.IF_COMMAND: return createIfCommand();
      case WhileDslPackage.FOREACH_COMMAND: return createForeachCommand();
      case WhileDslPackage.VARS_COMMAND: return createVarsCommand();
      case WhileDslPackage.VARS: return createVars();
      case WhileDslPackage.EXPR_SIMPLE: return createExprSimple();
      case WhileDslPackage.EXPR_SIMPLE_WITH_LEXPR: return createExprSimpleWithLExpr();
      case WhileDslPackage.EXPR_SIMPLE_WITH_EXPR: return createExprSimpleWithExpr();
      case WhileDslPackage.EXPR_SIMPLE_WITH_SYMBOL_LEXPR: return createExprSimpleWithSymbolLExpr();
      case WhileDslPackage.LEXPR: return createLExpr();
      case WhileDslPackage.EXPRS: return createExprs();
      case WhileDslPackage.EXPR: return createExpr();
      case WhileDslPackage.EXPR_AND: return createExprAnd();
      case WhileDslPackage.EXPR_OR: return createExprOr();
      case WhileDslPackage.EXPR_NOT: return createExprNot();
      case WhileDslPackage.EXPR_EQ: return createExprEq();
      case WhileDslPackage.NOP_COMMAND: return createNopCommand();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Model createModel()
  {
    ModelImpl model = new ModelImpl();
    return model;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Function createFunction()
  {
    FunctionImpl function = new FunctionImpl();
    return function;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Definition createDefinition()
  {
    DefinitionImpl definition = new DefinitionImpl();
    return definition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Input createInput()
  {
    InputImpl input = new InputImpl();
    return input;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Output createOutput()
  {
    OutputImpl output = new OutputImpl();
    return output;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Commands createCommands()
  {
    CommandsImpl commands = new CommandsImpl();
    return commands;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Command createCommand()
  {
    CommandImpl command = new CommandImpl();
    return command;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileCommand createWhileCommand()
  {
    WhileCommandImpl whileCommand = new WhileCommandImpl();
    return whileCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForCommand createForCommand()
  {
    ForCommandImpl forCommand = new ForCommandImpl();
    return forCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IfCommand createIfCommand()
  {
    IfCommandImpl ifCommand = new IfCommandImpl();
    return ifCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ForeachCommand createForeachCommand()
  {
    ForeachCommandImpl foreachCommand = new ForeachCommandImpl();
    return foreachCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VarsCommand createVarsCommand()
  {
    VarsCommandImpl varsCommand = new VarsCommandImpl();
    return varsCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Vars createVars()
  {
    VarsImpl vars = new VarsImpl();
    return vars;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprSimple createExprSimple()
  {
    ExprSimpleImpl exprSimple = new ExprSimpleImpl();
    return exprSimple;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprSimpleWithLExpr createExprSimpleWithLExpr()
  {
    ExprSimpleWithLExprImpl exprSimpleWithLExpr = new ExprSimpleWithLExprImpl();
    return exprSimpleWithLExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprSimpleWithExpr createExprSimpleWithExpr()
  {
    ExprSimpleWithExprImpl exprSimpleWithExpr = new ExprSimpleWithExprImpl();
    return exprSimpleWithExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprSimpleWithSymbolLExpr createExprSimpleWithSymbolLExpr()
  {
    ExprSimpleWithSymbolLExprImpl exprSimpleWithSymbolLExpr = new ExprSimpleWithSymbolLExprImpl();
    return exprSimpleWithSymbolLExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public LExpr createLExpr()
  {
    LExprImpl lExpr = new LExprImpl();
    return lExpr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Exprs createExprs()
  {
    ExprsImpl exprs = new ExprsImpl();
    return exprs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expr createExpr()
  {
    ExprImpl expr = new ExprImpl();
    return expr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprAnd createExprAnd()
  {
    ExprAndImpl exprAnd = new ExprAndImpl();
    return exprAnd;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprOr createExprOr()
  {
    ExprOrImpl exprOr = new ExprOrImpl();
    return exprOr;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprNot createExprNot()
  {
    ExprNotImpl exprNot = new ExprNotImpl();
    return exprNot;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public ExprEq createExprEq()
  {
    ExprEqImpl exprEq = new ExprEqImpl();
    return exprEq;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NopCommand createNopCommand()
  {
    NopCommandImpl nopCommand = new NopCommandImpl();
    return nopCommand;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WhileDslPackage getWhileDslPackage()
  {
    return (WhileDslPackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static WhileDslPackage getPackage()
  {
    return WhileDslPackage.eINSTANCE;
  }

} //WhileDslFactoryImpl
